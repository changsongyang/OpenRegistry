// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/kone/github_actions/v1/build_logs.proto

package github_actions_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DumpLogsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DumpLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DumpLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DumpLogsRequestMultiError, or nil if none found.
func (m *DumpLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DumpLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RepoOwner

	// no validation rules for RepoName

	// no validation rules for RunId

	if len(errors) > 0 {
		return DumpLogsRequestMultiError(errors)
	}

	return nil
}

// DumpLogsRequestMultiError is an error wrapping multiple validation errors
// returned by DumpLogsRequest.ValidateAll() if the designated constraints
// aren't met.
type DumpLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DumpLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DumpLogsRequestMultiError) AllErrors() []error { return m }

// DumpLogsRequestValidationError is the validation error returned by
// DumpLogsRequest.Validate if the designated constraints aren't met.
type DumpLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DumpLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DumpLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DumpLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DumpLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DumpLogsRequestValidationError) ErrorName() string { return "DumpLogsRequestValidationError" }

// Error satisfies the builtin error interface
func (e DumpLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDumpLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DumpLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DumpLogsRequestValidationError{}

// Validate checks the field values on DumpLogsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DumpLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DumpLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DumpLogsResponseMultiError, or nil if none found.
func (m *DumpLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DumpLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DumpLogsResponseMultiError(errors)
	}

	return nil
}

// DumpLogsResponseMultiError is an error wrapping multiple validation errors
// returned by DumpLogsResponse.ValidateAll() if the designated constraints
// aren't met.
type DumpLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DumpLogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DumpLogsResponseMultiError) AllErrors() []error { return m }

// DumpLogsResponseValidationError is the validation error returned by
// DumpLogsResponse.Validate if the designated constraints aren't met.
type DumpLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DumpLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DumpLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DumpLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DumpLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DumpLogsResponseValidationError) ErrorName() string { return "DumpLogsResponseValidationError" }

// Error satisfies the builtin error interface
func (e DumpLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDumpLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DumpLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DumpLogsResponseValidationError{}

// Validate checks the field values on StreamWorkflowJobLogsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamWorkflowJobLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamWorkflowJobLogsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamWorkflowJobLogsRequestMultiError, or nil if none found.
func (m *StreamWorkflowJobLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamWorkflowJobLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RepoOwner

	// no validation rules for RepoName

	// no validation rules for JobId

	if len(errors) > 0 {
		return StreamWorkflowJobLogsRequestMultiError(errors)
	}

	return nil
}

// StreamWorkflowJobLogsRequestMultiError is an error wrapping multiple
// validation errors returned by StreamWorkflowJobLogsRequest.ValidateAll() if
// the designated constraints aren't met.
type StreamWorkflowJobLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamWorkflowJobLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamWorkflowJobLogsRequestMultiError) AllErrors() []error { return m }

// StreamWorkflowJobLogsRequestValidationError is the validation error returned
// by StreamWorkflowJobLogsRequest.Validate if the designated constraints
// aren't met.
type StreamWorkflowJobLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamWorkflowJobLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamWorkflowJobLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamWorkflowJobLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamWorkflowJobLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamWorkflowJobLogsRequestValidationError) ErrorName() string {
	return "StreamWorkflowJobLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamWorkflowJobLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamWorkflowJobLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamWorkflowJobLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamWorkflowJobLogsRequestValidationError{}

// Validate checks the field values on StreamWorkflowRunLogsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamWorkflowRunLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamWorkflowRunLogsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamWorkflowRunLogsRequestMultiError, or nil if none found.
func (m *StreamWorkflowRunLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamWorkflowRunLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RepoOwner

	// no validation rules for RepoName

	// no validation rules for RunId

	if len(errors) > 0 {
		return StreamWorkflowRunLogsRequestMultiError(errors)
	}

	return nil
}

// StreamWorkflowRunLogsRequestMultiError is an error wrapping multiple
// validation errors returned by StreamWorkflowRunLogsRequest.ValidateAll() if
// the designated constraints aren't met.
type StreamWorkflowRunLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamWorkflowRunLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamWorkflowRunLogsRequestMultiError) AllErrors() []error { return m }

// StreamWorkflowRunLogsRequestValidationError is the validation error returned
// by StreamWorkflowRunLogsRequest.Validate if the designated constraints
// aren't met.
type StreamWorkflowRunLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamWorkflowRunLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamWorkflowRunLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamWorkflowRunLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamWorkflowRunLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamWorkflowRunLogsRequestValidationError) ErrorName() string {
	return "StreamWorkflowRunLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamWorkflowRunLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamWorkflowRunLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamWorkflowRunLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamWorkflowRunLogsRequestValidationError{}

// Validate checks the field values on StreamWorkflowDispatchLogsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StreamWorkflowDispatchLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamWorkflowDispatchLogsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StreamWorkflowDispatchLogsRequestMultiError, or nil if none found.
func (m *StreamWorkflowDispatchLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamWorkflowDispatchLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RepoOwner

	// no validation rules for RepoName

	// no validation rules for DispatchId

	if len(errors) > 0 {
		return StreamWorkflowDispatchLogsRequestMultiError(errors)
	}

	return nil
}

// StreamWorkflowDispatchLogsRequestMultiError is an error wrapping multiple
// validation errors returned by
// StreamWorkflowDispatchLogsRequest.ValidateAll() if the designated
// constraints aren't met.
type StreamWorkflowDispatchLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamWorkflowDispatchLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamWorkflowDispatchLogsRequestMultiError) AllErrors() []error { return m }

// StreamWorkflowDispatchLogsRequestValidationError is the validation error
// returned by StreamWorkflowDispatchLogsRequest.Validate if the designated
// constraints aren't met.
type StreamWorkflowDispatchLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamWorkflowDispatchLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamWorkflowDispatchLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamWorkflowDispatchLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamWorkflowDispatchLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamWorkflowDispatchLogsRequestValidationError) ErrorName() string {
	return "StreamWorkflowDispatchLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamWorkflowDispatchLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamWorkflowDispatchLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamWorkflowDispatchLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamWorkflowDispatchLogsRequestValidationError{}

// Validate checks the field values on StreamWorkflowJobLogsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamWorkflowJobLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamWorkflowJobLogsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StreamWorkflowJobLogsResponseMultiError, or nil if none found.
func (m *StreamWorkflowJobLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamWorkflowJobLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LogMessage

	if len(errors) > 0 {
		return StreamWorkflowJobLogsResponseMultiError(errors)
	}

	return nil
}

// StreamWorkflowJobLogsResponseMultiError is an error wrapping multiple
// validation errors returned by StreamWorkflowJobLogsResponse.ValidateAll()
// if the designated constraints aren't met.
type StreamWorkflowJobLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamWorkflowJobLogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamWorkflowJobLogsResponseMultiError) AllErrors() []error { return m }

// StreamWorkflowJobLogsResponseValidationError is the validation error
// returned by StreamWorkflowJobLogsResponse.Validate if the designated
// constraints aren't met.
type StreamWorkflowJobLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamWorkflowJobLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamWorkflowJobLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamWorkflowJobLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamWorkflowJobLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamWorkflowJobLogsResponseValidationError) ErrorName() string {
	return "StreamWorkflowJobLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StreamWorkflowJobLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamWorkflowJobLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamWorkflowJobLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamWorkflowJobLogsResponseValidationError{}

// Validate checks the field values on StreamWorkflowRunLogsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamWorkflowRunLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamWorkflowRunLogsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StreamWorkflowRunLogsResponseMultiError, or nil if none found.
func (m *StreamWorkflowRunLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamWorkflowRunLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LogMessage

	if len(errors) > 0 {
		return StreamWorkflowRunLogsResponseMultiError(errors)
	}

	return nil
}

// StreamWorkflowRunLogsResponseMultiError is an error wrapping multiple
// validation errors returned by StreamWorkflowRunLogsResponse.ValidateAll()
// if the designated constraints aren't met.
type StreamWorkflowRunLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamWorkflowRunLogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamWorkflowRunLogsResponseMultiError) AllErrors() []error { return m }

// StreamWorkflowRunLogsResponseValidationError is the validation error
// returned by StreamWorkflowRunLogsResponse.Validate if the designated
// constraints aren't met.
type StreamWorkflowRunLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamWorkflowRunLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamWorkflowRunLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamWorkflowRunLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamWorkflowRunLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamWorkflowRunLogsResponseValidationError) ErrorName() string {
	return "StreamWorkflowRunLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StreamWorkflowRunLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamWorkflowRunLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamWorkflowRunLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamWorkflowRunLogsResponseValidationError{}

// Validate checks the field values on StreamWorkflowDispatchLogsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *StreamWorkflowDispatchLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamWorkflowDispatchLogsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// StreamWorkflowDispatchLogsResponseMultiError, or nil if none found.
func (m *StreamWorkflowDispatchLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamWorkflowDispatchLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LogMessage

	if len(errors) > 0 {
		return StreamWorkflowDispatchLogsResponseMultiError(errors)
	}

	return nil
}

// StreamWorkflowDispatchLogsResponseMultiError is an error wrapping multiple
// validation errors returned by
// StreamWorkflowDispatchLogsResponse.ValidateAll() if the designated
// constraints aren't met.
type StreamWorkflowDispatchLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamWorkflowDispatchLogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamWorkflowDispatchLogsResponseMultiError) AllErrors() []error { return m }

// StreamWorkflowDispatchLogsResponseValidationError is the validation error
// returned by StreamWorkflowDispatchLogsResponse.Validate if the designated
// constraints aren't met.
type StreamWorkflowDispatchLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamWorkflowDispatchLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamWorkflowDispatchLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamWorkflowDispatchLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamWorkflowDispatchLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamWorkflowDispatchLogsResponseValidationError) ErrorName() string {
	return "StreamWorkflowDispatchLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StreamWorkflowDispatchLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamWorkflowDispatchLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamWorkflowDispatchLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamWorkflowDispatchLogsResponseValidationError{}
