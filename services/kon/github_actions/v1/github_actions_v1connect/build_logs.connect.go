// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/kon/github_actions/v1/build_logs.proto

package github_actions_v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/containerish/OpenRegistry/services/kon/github_actions/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// GitHubActionsLogsServiceName is the fully-qualified name of the GitHubActionsLogsService service.
	GitHubActionsLogsServiceName = "services.kon.github_actions.v1.GitHubActionsLogsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GitHubActionsLogsServiceStreamWorkflowJobLogsProcedure is the fully-qualified name of the
	// GitHubActionsLogsService's StreamWorkflowJobLogs RPC.
	GitHubActionsLogsServiceStreamWorkflowJobLogsProcedure = "/services.kon.github_actions.v1.GitHubActionsLogsService/StreamWorkflowJobLogs"
	// GitHubActionsLogsServiceStreamWorkflowRunLogsProcedure is the fully-qualified name of the
	// GitHubActionsLogsService's StreamWorkflowRunLogs RPC.
	GitHubActionsLogsServiceStreamWorkflowRunLogsProcedure = "/services.kon.github_actions.v1.GitHubActionsLogsService/StreamWorkflowRunLogs"
	// GitHubActionsLogsServiceDumpLogsProcedure is the fully-qualified name of the
	// GitHubActionsLogsService's DumpLogs RPC.
	GitHubActionsLogsServiceDumpLogsProcedure = "/services.kon.github_actions.v1.GitHubActionsLogsService/DumpLogs"
)

// GitHubActionsLogsServiceClient is a client for the
// services.kon.github_actions.v1.GitHubActionsLogsService service.
type GitHubActionsLogsServiceClient interface {
	StreamWorkflowJobLogs(context.Context, *connect_go.Request[v1.StreamWorkflowJobLogsRequest]) (*connect_go.ServerStreamForClient[v1.StreamWorkflowJobLogsResponse], error)
	StreamWorkflowRunLogs(context.Context, *connect_go.Request[v1.StreamWorkflowRunLogsRequest]) (*connect_go.ServerStreamForClient[v1.StreamWorkflowRunLogsResponse], error)
	DumpLogs(context.Context, *connect_go.Request[v1.DumpLogsRequest]) (*connect_go.Response[v1.DumpLogsResponse], error)
}

// NewGitHubActionsLogsServiceClient constructs a client for the
// services.kon.github_actions.v1.GitHubActionsLogsService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGitHubActionsLogsServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) GitHubActionsLogsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gitHubActionsLogsServiceClient{
		streamWorkflowJobLogs: connect_go.NewClient[v1.StreamWorkflowJobLogsRequest, v1.StreamWorkflowJobLogsResponse](
			httpClient,
			baseURL+GitHubActionsLogsServiceStreamWorkflowJobLogsProcedure,
			opts...,
		),
		streamWorkflowRunLogs: connect_go.NewClient[v1.StreamWorkflowRunLogsRequest, v1.StreamWorkflowRunLogsResponse](
			httpClient,
			baseURL+GitHubActionsLogsServiceStreamWorkflowRunLogsProcedure,
			opts...,
		),
		dumpLogs: connect_go.NewClient[v1.DumpLogsRequest, v1.DumpLogsResponse](
			httpClient,
			baseURL+GitHubActionsLogsServiceDumpLogsProcedure,
			opts...,
		),
	}
}

// gitHubActionsLogsServiceClient implements GitHubActionsLogsServiceClient.
type gitHubActionsLogsServiceClient struct {
	streamWorkflowJobLogs *connect_go.Client[v1.StreamWorkflowJobLogsRequest, v1.StreamWorkflowJobLogsResponse]
	streamWorkflowRunLogs *connect_go.Client[v1.StreamWorkflowRunLogsRequest, v1.StreamWorkflowRunLogsResponse]
	dumpLogs              *connect_go.Client[v1.DumpLogsRequest, v1.DumpLogsResponse]
}

// StreamWorkflowJobLogs calls
// services.kon.github_actions.v1.GitHubActionsLogsService.StreamWorkflowJobLogs.
func (c *gitHubActionsLogsServiceClient) StreamWorkflowJobLogs(ctx context.Context, req *connect_go.Request[v1.StreamWorkflowJobLogsRequest]) (*connect_go.ServerStreamForClient[v1.StreamWorkflowJobLogsResponse], error) {
	return c.streamWorkflowJobLogs.CallServerStream(ctx, req)
}

// StreamWorkflowRunLogs calls
// services.kon.github_actions.v1.GitHubActionsLogsService.StreamWorkflowRunLogs.
func (c *gitHubActionsLogsServiceClient) StreamWorkflowRunLogs(ctx context.Context, req *connect_go.Request[v1.StreamWorkflowRunLogsRequest]) (*connect_go.ServerStreamForClient[v1.StreamWorkflowRunLogsResponse], error) {
	return c.streamWorkflowRunLogs.CallServerStream(ctx, req)
}

// DumpLogs calls services.kon.github_actions.v1.GitHubActionsLogsService.DumpLogs.
func (c *gitHubActionsLogsServiceClient) DumpLogs(ctx context.Context, req *connect_go.Request[v1.DumpLogsRequest]) (*connect_go.Response[v1.DumpLogsResponse], error) {
	return c.dumpLogs.CallUnary(ctx, req)
}

// GitHubActionsLogsServiceHandler is an implementation of the
// services.kon.github_actions.v1.GitHubActionsLogsService service.
type GitHubActionsLogsServiceHandler interface {
	StreamWorkflowJobLogs(context.Context, *connect_go.Request[v1.StreamWorkflowJobLogsRequest], *connect_go.ServerStream[v1.StreamWorkflowJobLogsResponse]) error
	StreamWorkflowRunLogs(context.Context, *connect_go.Request[v1.StreamWorkflowRunLogsRequest], *connect_go.ServerStream[v1.StreamWorkflowRunLogsResponse]) error
	DumpLogs(context.Context, *connect_go.Request[v1.DumpLogsRequest]) (*connect_go.Response[v1.DumpLogsResponse], error)
}

// NewGitHubActionsLogsServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGitHubActionsLogsServiceHandler(svc GitHubActionsLogsServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(GitHubActionsLogsServiceStreamWorkflowJobLogsProcedure, connect_go.NewServerStreamHandler(
		GitHubActionsLogsServiceStreamWorkflowJobLogsProcedure,
		svc.StreamWorkflowJobLogs,
		opts...,
	))
	mux.Handle(GitHubActionsLogsServiceStreamWorkflowRunLogsProcedure, connect_go.NewServerStreamHandler(
		GitHubActionsLogsServiceStreamWorkflowRunLogsProcedure,
		svc.StreamWorkflowRunLogs,
		opts...,
	))
	mux.Handle(GitHubActionsLogsServiceDumpLogsProcedure, connect_go.NewUnaryHandler(
		GitHubActionsLogsServiceDumpLogsProcedure,
		svc.DumpLogs,
		opts...,
	))
	return "/services.kon.github_actions.v1.GitHubActionsLogsService/", mux
}

// UnimplementedGitHubActionsLogsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGitHubActionsLogsServiceHandler struct{}

func (UnimplementedGitHubActionsLogsServiceHandler) StreamWorkflowJobLogs(context.Context, *connect_go.Request[v1.StreamWorkflowJobLogsRequest], *connect_go.ServerStream[v1.StreamWorkflowJobLogsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.kon.github_actions.v1.GitHubActionsLogsService.StreamWorkflowJobLogs is not implemented"))
}

func (UnimplementedGitHubActionsLogsServiceHandler) StreamWorkflowRunLogs(context.Context, *connect_go.Request[v1.StreamWorkflowRunLogsRequest], *connect_go.ServerStream[v1.StreamWorkflowRunLogsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.kon.github_actions.v1.GitHubActionsLogsService.StreamWorkflowRunLogs is not implemented"))
}

func (UnimplementedGitHubActionsLogsServiceHandler) DumpLogs(context.Context, *connect_go.Request[v1.DumpLogsRequest]) (*connect_go.Response[v1.DumpLogsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("services.kon.github_actions.v1.GitHubActionsLogsService.DumpLogs is not implemented"))
}
