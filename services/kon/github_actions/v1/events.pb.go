// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: services/kon/github_actions/v1/events.proto

package github_actions_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// All of the types are from https://docs.github.com/en/webhooks-and-events/webhooks/webhook-events-and-payloads
type GitHubWebhookEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action        string                    `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Sender        *GitHubWebhookEventSender `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Repository    *GitHubRepository         `protobuf:"bytes,3,opt,name=repository,proto3" json:"repository,omitempty"`
	Orgranization *GithubOrganization       `protobuf:"bytes,4,opt,name=orgranization,proto3" json:"orgranization,omitempty"`
	Installation  *GitHubAppInstallation    `protobuf:"bytes,5,opt,name=installation,proto3" json:"installation,omitempty"`
}

func (x *GitHubWebhookEvent) Reset() {
	*x = GitHubWebhookEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_kon_github_actions_v1_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitHubWebhookEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitHubWebhookEvent) ProtoMessage() {}

func (x *GitHubWebhookEvent) ProtoReflect() protoreflect.Message {
	mi := &file_services_kon_github_actions_v1_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitHubWebhookEvent.ProtoReflect.Descriptor instead.
func (*GitHubWebhookEvent) Descriptor() ([]byte, []int) {
	return file_services_kon_github_actions_v1_events_proto_rawDescGZIP(), []int{0}
}

func (x *GitHubWebhookEvent) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *GitHubWebhookEvent) GetSender() *GitHubWebhookEventSender {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *GitHubWebhookEvent) GetRepository() *GitHubRepository {
	if x != nil {
		return x.Repository
	}
	return nil
}

func (x *GitHubWebhookEvent) GetOrgranization() *GithubOrganization {
	if x != nil {
		return x.Orgranization
	}
	return nil
}

func (x *GitHubWebhookEvent) GetInstallation() *GitHubAppInstallation {
	if x != nil {
		return x.Installation
	}
	return nil
}

type GitHubWebhookEventSender struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Login             string `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Id                uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	NodeId            string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	AvatarUrl         string `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	GravatarId        string `protobuf:"bytes,5,opt,name=gravatar_id,json=gravatarId,proto3" json:"gravatar_id,omitempty"`
	Url               string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	HtmlUrl           string `protobuf:"bytes,7,opt,name=html_url,json=htmlUrl,proto3" json:"html_url,omitempty"`
	FollowersUrl      string `protobuf:"bytes,8,opt,name=followers_url,json=followersUrl,proto3" json:"followers_url,omitempty"`
	FollowingUrl      string `protobuf:"bytes,9,opt,name=following_url,json=followingUrl,proto3" json:"following_url,omitempty"`
	GistsUrl          string `protobuf:"bytes,10,opt,name=gists_url,json=gistsUrl,proto3" json:"gists_url,omitempty"`
	StarredUrl        string `protobuf:"bytes,11,opt,name=starred_url,json=starredUrl,proto3" json:"starred_url,omitempty"`
	SubscriptionsUrl  string `protobuf:"bytes,12,opt,name=subscriptions_url,json=subscriptionsUrl,proto3" json:"subscriptions_url,omitempty"`
	OrganizationsUrl  string `protobuf:"bytes,13,opt,name=organizations_url,json=organizationsUrl,proto3" json:"organizations_url,omitempty"`
	ReposUrl          string `protobuf:"bytes,14,opt,name=repos_url,json=reposUrl,proto3" json:"repos_url,omitempty"`
	EventsUrl         string `protobuf:"bytes,15,opt,name=events_url,json=eventsUrl,proto3" json:"events_url,omitempty"`
	ReceivedEventsUrl string `protobuf:"bytes,16,opt,name=received_events_url,json=receivedEventsUrl,proto3" json:"received_events_url,omitempty"`
	Type              string `protobuf:"bytes,17,opt,name=type,proto3" json:"type,omitempty"`
	SiteAdmin         bool   `protobuf:"varint,18,opt,name=site_admin,json=siteAdmin,proto3" json:"site_admin,omitempty"`
}

func (x *GitHubWebhookEventSender) Reset() {
	*x = GitHubWebhookEventSender{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_kon_github_actions_v1_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitHubWebhookEventSender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitHubWebhookEventSender) ProtoMessage() {}

func (x *GitHubWebhookEventSender) ProtoReflect() protoreflect.Message {
	mi := &file_services_kon_github_actions_v1_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitHubWebhookEventSender.ProtoReflect.Descriptor instead.
func (*GitHubWebhookEventSender) Descriptor() ([]byte, []int) {
	return file_services_kon_github_actions_v1_events_proto_rawDescGZIP(), []int{1}
}

func (x *GitHubWebhookEventSender) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *GitHubWebhookEventSender) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GitHubWebhookEventSender) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *GitHubWebhookEventSender) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *GitHubWebhookEventSender) GetGravatarId() string {
	if x != nil {
		return x.GravatarId
	}
	return ""
}

func (x *GitHubWebhookEventSender) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GitHubWebhookEventSender) GetHtmlUrl() string {
	if x != nil {
		return x.HtmlUrl
	}
	return ""
}

func (x *GitHubWebhookEventSender) GetFollowersUrl() string {
	if x != nil {
		return x.FollowersUrl
	}
	return ""
}

func (x *GitHubWebhookEventSender) GetFollowingUrl() string {
	if x != nil {
		return x.FollowingUrl
	}
	return ""
}

func (x *GitHubWebhookEventSender) GetGistsUrl() string {
	if x != nil {
		return x.GistsUrl
	}
	return ""
}

func (x *GitHubWebhookEventSender) GetStarredUrl() string {
	if x != nil {
		return x.StarredUrl
	}
	return ""
}

func (x *GitHubWebhookEventSender) GetSubscriptionsUrl() string {
	if x != nil {
		return x.SubscriptionsUrl
	}
	return ""
}

func (x *GitHubWebhookEventSender) GetOrganizationsUrl() string {
	if x != nil {
		return x.OrganizationsUrl
	}
	return ""
}

func (x *GitHubWebhookEventSender) GetReposUrl() string {
	if x != nil {
		return x.ReposUrl
	}
	return ""
}

func (x *GitHubWebhookEventSender) GetEventsUrl() string {
	if x != nil {
		return x.EventsUrl
	}
	return ""
}

func (x *GitHubWebhookEventSender) GetReceivedEventsUrl() string {
	if x != nil {
		return x.ReceivedEventsUrl
	}
	return ""
}

func (x *GitHubWebhookEventSender) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GitHubWebhookEventSender) GetSiteAdmin() bool {
	if x != nil {
		return x.SiteAdmin
	}
	return false
}

type GitHubRepository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       uint32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeId                   string                   `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Name                     string                   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	FullName                 string                   `protobuf:"bytes,4,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	Private                  bool                     `protobuf:"varint,5,opt,name=private,proto3" json:"private,omitempty"`
	Owner                    *GitHubRepositoryOwner   `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
	HtmlUrl                  string                   `protobuf:"bytes,7,opt,name=html_url,json=htmlUrl,proto3" json:"html_url,omitempty"`
	Description              string                   `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Fork                     bool                     `protobuf:"varint,9,opt,name=fork,proto3" json:"fork,omitempty"`
	Url                      string                   `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`
	ForksUrl                 string                   `protobuf:"bytes,11,opt,name=forks_url,json=forksUrl,proto3" json:"forks_url,omitempty"`
	KeysUrl                  string                   `protobuf:"bytes,12,opt,name=keys_url,json=keysUrl,proto3" json:"keys_url,omitempty"`
	CollaboratorsUrl         string                   `protobuf:"bytes,13,opt,name=collaborators_url,json=collaboratorsUrl,proto3" json:"collaborators_url,omitempty"`
	TeamsUrl                 string                   `protobuf:"bytes,14,opt,name=teams_url,json=teamsUrl,proto3" json:"teams_url,omitempty"`
	HooksUrl                 string                   `protobuf:"bytes,15,opt,name=hooks_url,json=hooksUrl,proto3" json:"hooks_url,omitempty"`
	IssueEventsUrl           string                   `protobuf:"bytes,16,opt,name=issue_events_url,json=issueEventsUrl,proto3" json:"issue_events_url,omitempty"`
	EventsUrl                string                   `protobuf:"bytes,17,opt,name=events_url,json=eventsUrl,proto3" json:"events_url,omitempty"`
	AssigneesUrl             string                   `protobuf:"bytes,18,opt,name=assignees_url,json=assigneesUrl,proto3" json:"assignees_url,omitempty"`
	BranchesUrl              string                   `protobuf:"bytes,19,opt,name=branches_url,json=branchesUrl,proto3" json:"branches_url,omitempty"`
	TagsUrl                  string                   `protobuf:"bytes,20,opt,name=tags_url,json=tagsUrl,proto3" json:"tags_url,omitempty"`
	BlobsUrl                 string                   `protobuf:"bytes,21,opt,name=blobs_url,json=blobsUrl,proto3" json:"blobs_url,omitempty"`
	GitTagsUrl               string                   `protobuf:"bytes,22,opt,name=git_tags_url,json=gitTagsUrl,proto3" json:"git_tags_url,omitempty"`
	GitRefsUrl               string                   `protobuf:"bytes,23,opt,name=git_refs_url,json=gitRefsUrl,proto3" json:"git_refs_url,omitempty"`
	TreesUrl                 string                   `protobuf:"bytes,24,opt,name=trees_url,json=treesUrl,proto3" json:"trees_url,omitempty"`
	StatusesUrl              string                   `protobuf:"bytes,25,opt,name=statuses_url,json=statusesUrl,proto3" json:"statuses_url,omitempty"`
	LanguagesUrl             string                   `protobuf:"bytes,26,opt,name=languages_url,json=languagesUrl,proto3" json:"languages_url,omitempty"`
	StargazersUrl            string                   `protobuf:"bytes,27,opt,name=stargazers_url,json=stargazersUrl,proto3" json:"stargazers_url,omitempty"`
	ContributorsUrl          string                   `protobuf:"bytes,28,opt,name=contributors_url,json=contributorsUrl,proto3" json:"contributors_url,omitempty"`
	SubscribersUrl           string                   `protobuf:"bytes,29,opt,name=subscribers_url,json=subscribersUrl,proto3" json:"subscribers_url,omitempty"`
	SubscriptionUrl          string                   `protobuf:"bytes,30,opt,name=subscription_url,json=subscriptionUrl,proto3" json:"subscription_url,omitempty"`
	CommitsUrl               string                   `protobuf:"bytes,31,opt,name=commits_url,json=commitsUrl,proto3" json:"commits_url,omitempty"`
	GitCommitsUrl            string                   `protobuf:"bytes,32,opt,name=git_commits_url,json=gitCommitsUrl,proto3" json:"git_commits_url,omitempty"`
	CommentsUrl              string                   `protobuf:"bytes,33,opt,name=comments_url,json=commentsUrl,proto3" json:"comments_url,omitempty"`
	IssueCommentUrl          string                   `protobuf:"bytes,34,opt,name=issue_comment_url,json=issueCommentUrl,proto3" json:"issue_comment_url,omitempty"`
	ContentsUrl              string                   `protobuf:"bytes,35,opt,name=contents_url,json=contentsUrl,proto3" json:"contents_url,omitempty"`
	CompareUrl               string                   `protobuf:"bytes,36,opt,name=compare_url,json=compareUrl,proto3" json:"compare_url,omitempty"`
	MergesUrl                string                   `protobuf:"bytes,37,opt,name=merges_url,json=mergesUrl,proto3" json:"merges_url,omitempty"`
	ArchiveUrl               string                   `protobuf:"bytes,38,opt,name=archive_url,json=archiveUrl,proto3" json:"archive_url,omitempty"`
	DownloadsUrl             string                   `protobuf:"bytes,39,opt,name=downloads_url,json=downloadsUrl,proto3" json:"downloads_url,omitempty"`
	IssuesUrl                string                   `protobuf:"bytes,40,opt,name=issues_url,json=issuesUrl,proto3" json:"issues_url,omitempty"`
	PullsUrl                 string                   `protobuf:"bytes,41,opt,name=pulls_url,json=pullsUrl,proto3" json:"pulls_url,omitempty"`
	MilestonesUrl            string                   `protobuf:"bytes,42,opt,name=milestones_url,json=milestonesUrl,proto3" json:"milestones_url,omitempty"`
	NotificationsUrl         string                   `protobuf:"bytes,43,opt,name=notifications_url,json=notificationsUrl,proto3" json:"notifications_url,omitempty"`
	LabelsUrl                string                   `protobuf:"bytes,44,opt,name=labels_url,json=labelsUrl,proto3" json:"labels_url,omitempty"`
	ReleasesUrl              string                   `protobuf:"bytes,45,opt,name=releases_url,json=releasesUrl,proto3" json:"releases_url,omitempty"`
	DeploymentsUrl           string                   `protobuf:"bytes,46,opt,name=deployments_url,json=deploymentsUrl,proto3" json:"deployments_url,omitempty"`
	CreatedAt                *timestamppb.Timestamp   `protobuf:"bytes,47,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                *timestamppb.Timestamp   `protobuf:"bytes,48,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	PushedAt                 *timestamppb.Timestamp   `protobuf:"bytes,49,opt,name=pushed_at,json=pushedAt,proto3" json:"pushed_at,omitempty"`
	GitUrl                   string                   `protobuf:"bytes,50,opt,name=git_url,json=gitUrl,proto3" json:"git_url,omitempty"`
	SshUrl                   string                   `protobuf:"bytes,51,opt,name=ssh_url,json=sshUrl,proto3" json:"ssh_url,omitempty"`
	CloneUrl                 string                   `protobuf:"bytes,52,opt,name=clone_url,json=cloneUrl,proto3" json:"clone_url,omitempty"`
	SvnUrl                   string                   `protobuf:"bytes,53,opt,name=svn_url,json=svnUrl,proto3" json:"svn_url,omitempty"`
	Homepage                 string                   `protobuf:"bytes,54,opt,name=homepage,proto3" json:"homepage,omitempty"`
	Size                     uint32                   `protobuf:"varint,55,opt,name=size,proto3" json:"size,omitempty"`
	StargazersCount          uint32                   `protobuf:"varint,56,opt,name=stargazers_count,json=stargazersCount,proto3" json:"stargazers_count,omitempty"`
	WatchersCount            uint32                   `protobuf:"varint,57,opt,name=watchers_count,json=watchersCount,proto3" json:"watchers_count,omitempty"`
	Language                 string                   `protobuf:"bytes,58,opt,name=language,proto3" json:"language,omitempty"`
	HasIssues                bool                     `protobuf:"varint,59,opt,name=has_issues,json=hasIssues,proto3" json:"has_issues,omitempty"`
	HasProjects              bool                     `protobuf:"varint,60,opt,name=has_projects,json=hasProjects,proto3" json:"has_projects,omitempty"`
	HasDownloads             bool                     `protobuf:"varint,61,opt,name=has_downloads,json=hasDownloads,proto3" json:"has_downloads,omitempty"`
	HasWiki                  bool                     `protobuf:"varint,62,opt,name=has_wiki,json=hasWiki,proto3" json:"has_wiki,omitempty"`
	HasPages                 bool                     `protobuf:"varint,63,opt,name=has_pages,json=hasPages,proto3" json:"has_pages,omitempty"`
	HasDiscussions           bool                     `protobuf:"varint,64,opt,name=has_discussions,json=hasDiscussions,proto3" json:"has_discussions,omitempty"`
	ForksCount               uint32                   `protobuf:"varint,65,opt,name=forks_count,json=forksCount,proto3" json:"forks_count,omitempty"`
	MirrorUrl                *anypb.Any               `protobuf:"bytes,66,opt,name=mirror_url,json=mirrorUrl,proto3" json:"mirror_url,omitempty"`
	Archived                 bool                     `protobuf:"varint,67,opt,name=archived,proto3" json:"archived,omitempty"`
	Disabled                 bool                     `protobuf:"varint,68,opt,name=disabled,proto3" json:"disabled,omitempty"`
	OpenIssuesCount          uint32                   `protobuf:"varint,69,opt,name=open_issues_count,json=openIssuesCount,proto3" json:"open_issues_count,omitempty"`
	License                  *GitHubRepositoryLicense `protobuf:"bytes,70,opt,name=license,proto3" json:"license,omitempty"`
	AllowForking             bool                     `protobuf:"varint,71,opt,name=allow_forking,json=allowForking,proto3" json:"allow_forking,omitempty"`
	IsTemplate               bool                     `protobuf:"varint,72,opt,name=is_template,json=isTemplate,proto3" json:"is_template,omitempty"`
	WebCommitSignoffRequired bool                     `protobuf:"varint,73,opt,name=web_commit_signoff_required,json=webCommitSignoffRequired,proto3" json:"web_commit_signoff_required,omitempty"`
	Topics                   []*anypb.Any             `protobuf:"bytes,74,rep,name=topics,proto3" json:"topics,omitempty"`
	Visibility               string                   `protobuf:"bytes,75,opt,name=visibility,proto3" json:"visibility,omitempty"`
	Forks                    uint32                   `protobuf:"varint,76,opt,name=forks,proto3" json:"forks,omitempty"`
	OpenIssues               uint32                   `protobuf:"varint,77,opt,name=open_issues,json=openIssues,proto3" json:"open_issues,omitempty"`
	Watchers                 uint32                   `protobuf:"varint,78,opt,name=watchers,proto3" json:"watchers,omitempty"`
	DefaultBranch            string                   `protobuf:"bytes,79,opt,name=default_branch,json=defaultBranch,proto3" json:"default_branch,omitempty"`
}

func (x *GitHubRepository) Reset() {
	*x = GitHubRepository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_kon_github_actions_v1_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitHubRepository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitHubRepository) ProtoMessage() {}

func (x *GitHubRepository) ProtoReflect() protoreflect.Message {
	mi := &file_services_kon_github_actions_v1_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitHubRepository.ProtoReflect.Descriptor instead.
func (*GitHubRepository) Descriptor() ([]byte, []int) {
	return file_services_kon_github_actions_v1_events_proto_rawDescGZIP(), []int{2}
}

func (x *GitHubRepository) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GitHubRepository) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *GitHubRepository) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitHubRepository) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *GitHubRepository) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *GitHubRepository) GetOwner() *GitHubRepositoryOwner {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *GitHubRepository) GetHtmlUrl() string {
	if x != nil {
		return x.HtmlUrl
	}
	return ""
}

func (x *GitHubRepository) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GitHubRepository) GetFork() bool {
	if x != nil {
		return x.Fork
	}
	return false
}

func (x *GitHubRepository) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GitHubRepository) GetForksUrl() string {
	if x != nil {
		return x.ForksUrl
	}
	return ""
}

func (x *GitHubRepository) GetKeysUrl() string {
	if x != nil {
		return x.KeysUrl
	}
	return ""
}

func (x *GitHubRepository) GetCollaboratorsUrl() string {
	if x != nil {
		return x.CollaboratorsUrl
	}
	return ""
}

func (x *GitHubRepository) GetTeamsUrl() string {
	if x != nil {
		return x.TeamsUrl
	}
	return ""
}

func (x *GitHubRepository) GetHooksUrl() string {
	if x != nil {
		return x.HooksUrl
	}
	return ""
}

func (x *GitHubRepository) GetIssueEventsUrl() string {
	if x != nil {
		return x.IssueEventsUrl
	}
	return ""
}

func (x *GitHubRepository) GetEventsUrl() string {
	if x != nil {
		return x.EventsUrl
	}
	return ""
}

func (x *GitHubRepository) GetAssigneesUrl() string {
	if x != nil {
		return x.AssigneesUrl
	}
	return ""
}

func (x *GitHubRepository) GetBranchesUrl() string {
	if x != nil {
		return x.BranchesUrl
	}
	return ""
}

func (x *GitHubRepository) GetTagsUrl() string {
	if x != nil {
		return x.TagsUrl
	}
	return ""
}

func (x *GitHubRepository) GetBlobsUrl() string {
	if x != nil {
		return x.BlobsUrl
	}
	return ""
}

func (x *GitHubRepository) GetGitTagsUrl() string {
	if x != nil {
		return x.GitTagsUrl
	}
	return ""
}

func (x *GitHubRepository) GetGitRefsUrl() string {
	if x != nil {
		return x.GitRefsUrl
	}
	return ""
}

func (x *GitHubRepository) GetTreesUrl() string {
	if x != nil {
		return x.TreesUrl
	}
	return ""
}

func (x *GitHubRepository) GetStatusesUrl() string {
	if x != nil {
		return x.StatusesUrl
	}
	return ""
}

func (x *GitHubRepository) GetLanguagesUrl() string {
	if x != nil {
		return x.LanguagesUrl
	}
	return ""
}

func (x *GitHubRepository) GetStargazersUrl() string {
	if x != nil {
		return x.StargazersUrl
	}
	return ""
}

func (x *GitHubRepository) GetContributorsUrl() string {
	if x != nil {
		return x.ContributorsUrl
	}
	return ""
}

func (x *GitHubRepository) GetSubscribersUrl() string {
	if x != nil {
		return x.SubscribersUrl
	}
	return ""
}

func (x *GitHubRepository) GetSubscriptionUrl() string {
	if x != nil {
		return x.SubscriptionUrl
	}
	return ""
}

func (x *GitHubRepository) GetCommitsUrl() string {
	if x != nil {
		return x.CommitsUrl
	}
	return ""
}

func (x *GitHubRepository) GetGitCommitsUrl() string {
	if x != nil {
		return x.GitCommitsUrl
	}
	return ""
}

func (x *GitHubRepository) GetCommentsUrl() string {
	if x != nil {
		return x.CommentsUrl
	}
	return ""
}

func (x *GitHubRepository) GetIssueCommentUrl() string {
	if x != nil {
		return x.IssueCommentUrl
	}
	return ""
}

func (x *GitHubRepository) GetContentsUrl() string {
	if x != nil {
		return x.ContentsUrl
	}
	return ""
}

func (x *GitHubRepository) GetCompareUrl() string {
	if x != nil {
		return x.CompareUrl
	}
	return ""
}

func (x *GitHubRepository) GetMergesUrl() string {
	if x != nil {
		return x.MergesUrl
	}
	return ""
}

func (x *GitHubRepository) GetArchiveUrl() string {
	if x != nil {
		return x.ArchiveUrl
	}
	return ""
}

func (x *GitHubRepository) GetDownloadsUrl() string {
	if x != nil {
		return x.DownloadsUrl
	}
	return ""
}

func (x *GitHubRepository) GetIssuesUrl() string {
	if x != nil {
		return x.IssuesUrl
	}
	return ""
}

func (x *GitHubRepository) GetPullsUrl() string {
	if x != nil {
		return x.PullsUrl
	}
	return ""
}

func (x *GitHubRepository) GetMilestonesUrl() string {
	if x != nil {
		return x.MilestonesUrl
	}
	return ""
}

func (x *GitHubRepository) GetNotificationsUrl() string {
	if x != nil {
		return x.NotificationsUrl
	}
	return ""
}

func (x *GitHubRepository) GetLabelsUrl() string {
	if x != nil {
		return x.LabelsUrl
	}
	return ""
}

func (x *GitHubRepository) GetReleasesUrl() string {
	if x != nil {
		return x.ReleasesUrl
	}
	return ""
}

func (x *GitHubRepository) GetDeploymentsUrl() string {
	if x != nil {
		return x.DeploymentsUrl
	}
	return ""
}

func (x *GitHubRepository) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GitHubRepository) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GitHubRepository) GetPushedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PushedAt
	}
	return nil
}

func (x *GitHubRepository) GetGitUrl() string {
	if x != nil {
		return x.GitUrl
	}
	return ""
}

func (x *GitHubRepository) GetSshUrl() string {
	if x != nil {
		return x.SshUrl
	}
	return ""
}

func (x *GitHubRepository) GetCloneUrl() string {
	if x != nil {
		return x.CloneUrl
	}
	return ""
}

func (x *GitHubRepository) GetSvnUrl() string {
	if x != nil {
		return x.SvnUrl
	}
	return ""
}

func (x *GitHubRepository) GetHomepage() string {
	if x != nil {
		return x.Homepage
	}
	return ""
}

func (x *GitHubRepository) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GitHubRepository) GetStargazersCount() uint32 {
	if x != nil {
		return x.StargazersCount
	}
	return 0
}

func (x *GitHubRepository) GetWatchersCount() uint32 {
	if x != nil {
		return x.WatchersCount
	}
	return 0
}

func (x *GitHubRepository) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *GitHubRepository) GetHasIssues() bool {
	if x != nil {
		return x.HasIssues
	}
	return false
}

func (x *GitHubRepository) GetHasProjects() bool {
	if x != nil {
		return x.HasProjects
	}
	return false
}

func (x *GitHubRepository) GetHasDownloads() bool {
	if x != nil {
		return x.HasDownloads
	}
	return false
}

func (x *GitHubRepository) GetHasWiki() bool {
	if x != nil {
		return x.HasWiki
	}
	return false
}

func (x *GitHubRepository) GetHasPages() bool {
	if x != nil {
		return x.HasPages
	}
	return false
}

func (x *GitHubRepository) GetHasDiscussions() bool {
	if x != nil {
		return x.HasDiscussions
	}
	return false
}

func (x *GitHubRepository) GetForksCount() uint32 {
	if x != nil {
		return x.ForksCount
	}
	return 0
}

func (x *GitHubRepository) GetMirrorUrl() *anypb.Any {
	if x != nil {
		return x.MirrorUrl
	}
	return nil
}

func (x *GitHubRepository) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *GitHubRepository) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *GitHubRepository) GetOpenIssuesCount() uint32 {
	if x != nil {
		return x.OpenIssuesCount
	}
	return 0
}

func (x *GitHubRepository) GetLicense() *GitHubRepositoryLicense {
	if x != nil {
		return x.License
	}
	return nil
}

func (x *GitHubRepository) GetAllowForking() bool {
	if x != nil {
		return x.AllowForking
	}
	return false
}

func (x *GitHubRepository) GetIsTemplate() bool {
	if x != nil {
		return x.IsTemplate
	}
	return false
}

func (x *GitHubRepository) GetWebCommitSignoffRequired() bool {
	if x != nil {
		return x.WebCommitSignoffRequired
	}
	return false
}

func (x *GitHubRepository) GetTopics() []*anypb.Any {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *GitHubRepository) GetVisibility() string {
	if x != nil {
		return x.Visibility
	}
	return ""
}

func (x *GitHubRepository) GetForks() uint32 {
	if x != nil {
		return x.Forks
	}
	return 0
}

func (x *GitHubRepository) GetOpenIssues() uint32 {
	if x != nil {
		return x.OpenIssues
	}
	return 0
}

func (x *GitHubRepository) GetWatchers() uint32 {
	if x != nil {
		return x.Watchers
	}
	return 0
}

func (x *GitHubRepository) GetDefaultBranch() string {
	if x != nil {
		return x.DefaultBranch
	}
	return ""
}

type GitHubRepositoryOwner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Login             string `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Id                uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	NodeId            string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	AvatarUrl         string `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	GravatarId        string `protobuf:"bytes,5,opt,name=gravatar_id,json=gravatarId,proto3" json:"gravatar_id,omitempty"`
	Url               string `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	HtmlUrl           string `protobuf:"bytes,7,opt,name=html_url,json=htmlUrl,proto3" json:"html_url,omitempty"`
	FollowersUrl      string `protobuf:"bytes,8,opt,name=followers_url,json=followersUrl,proto3" json:"followers_url,omitempty"`
	FollowingUrl      string `protobuf:"bytes,9,opt,name=following_url,json=followingUrl,proto3" json:"following_url,omitempty"`
	GistsUrl          string `protobuf:"bytes,10,opt,name=gists_url,json=gistsUrl,proto3" json:"gists_url,omitempty"`
	StarredUrl        string `protobuf:"bytes,11,opt,name=starred_url,json=starredUrl,proto3" json:"starred_url,omitempty"`
	SubscriptionsUrl  string `protobuf:"bytes,12,opt,name=subscriptions_url,json=subscriptionsUrl,proto3" json:"subscriptions_url,omitempty"`
	OrganizationsUrl  string `protobuf:"bytes,13,opt,name=organizations_url,json=organizationsUrl,proto3" json:"organizations_url,omitempty"`
	ReposUrl          string `protobuf:"bytes,14,opt,name=repos_url,json=reposUrl,proto3" json:"repos_url,omitempty"`
	EventsUrl         string `protobuf:"bytes,15,opt,name=events_url,json=eventsUrl,proto3" json:"events_url,omitempty"`
	ReceivedEventsUrl string `protobuf:"bytes,16,opt,name=received_events_url,json=receivedEventsUrl,proto3" json:"received_events_url,omitempty"`
	Type              string `protobuf:"bytes,17,opt,name=type,proto3" json:"type,omitempty"`
	SiteAdmin         bool   `protobuf:"varint,18,opt,name=site_admin,json=siteAdmin,proto3" json:"site_admin,omitempty"`
}

func (x *GitHubRepositoryOwner) Reset() {
	*x = GitHubRepositoryOwner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_kon_github_actions_v1_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitHubRepositoryOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitHubRepositoryOwner) ProtoMessage() {}

func (x *GitHubRepositoryOwner) ProtoReflect() protoreflect.Message {
	mi := &file_services_kon_github_actions_v1_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitHubRepositoryOwner.ProtoReflect.Descriptor instead.
func (*GitHubRepositoryOwner) Descriptor() ([]byte, []int) {
	return file_services_kon_github_actions_v1_events_proto_rawDescGZIP(), []int{3}
}

func (x *GitHubRepositoryOwner) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *GitHubRepositoryOwner) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GitHubRepositoryOwner) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *GitHubRepositoryOwner) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *GitHubRepositoryOwner) GetGravatarId() string {
	if x != nil {
		return x.GravatarId
	}
	return ""
}

func (x *GitHubRepositoryOwner) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GitHubRepositoryOwner) GetHtmlUrl() string {
	if x != nil {
		return x.HtmlUrl
	}
	return ""
}

func (x *GitHubRepositoryOwner) GetFollowersUrl() string {
	if x != nil {
		return x.FollowersUrl
	}
	return ""
}

func (x *GitHubRepositoryOwner) GetFollowingUrl() string {
	if x != nil {
		return x.FollowingUrl
	}
	return ""
}

func (x *GitHubRepositoryOwner) GetGistsUrl() string {
	if x != nil {
		return x.GistsUrl
	}
	return ""
}

func (x *GitHubRepositoryOwner) GetStarredUrl() string {
	if x != nil {
		return x.StarredUrl
	}
	return ""
}

func (x *GitHubRepositoryOwner) GetSubscriptionsUrl() string {
	if x != nil {
		return x.SubscriptionsUrl
	}
	return ""
}

func (x *GitHubRepositoryOwner) GetOrganizationsUrl() string {
	if x != nil {
		return x.OrganizationsUrl
	}
	return ""
}

func (x *GitHubRepositoryOwner) GetReposUrl() string {
	if x != nil {
		return x.ReposUrl
	}
	return ""
}

func (x *GitHubRepositoryOwner) GetEventsUrl() string {
	if x != nil {
		return x.EventsUrl
	}
	return ""
}

func (x *GitHubRepositoryOwner) GetReceivedEventsUrl() string {
	if x != nil {
		return x.ReceivedEventsUrl
	}
	return ""
}

func (x *GitHubRepositoryOwner) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GitHubRepositoryOwner) GetSiteAdmin() bool {
	if x != nil {
		return x.SiteAdmin
	}
	return false
}

type GitHubRepositoryLicense struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SpdxId string `protobuf:"bytes,3,opt,name=spdx_id,json=spdxId,proto3" json:"spdx_id,omitempty"`
	Url    string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	NodeId string `protobuf:"bytes,5,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *GitHubRepositoryLicense) Reset() {
	*x = GitHubRepositoryLicense{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_kon_github_actions_v1_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitHubRepositoryLicense) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitHubRepositoryLicense) ProtoMessage() {}

func (x *GitHubRepositoryLicense) ProtoReflect() protoreflect.Message {
	mi := &file_services_kon_github_actions_v1_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitHubRepositoryLicense.ProtoReflect.Descriptor instead.
func (*GitHubRepositoryLicense) Descriptor() ([]byte, []int) {
	return file_services_kon_github_actions_v1_events_proto_rawDescGZIP(), []int{4}
}

func (x *GitHubRepositoryLicense) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GitHubRepositoryLicense) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitHubRepositoryLicense) GetSpdxId() string {
	if x != nil {
		return x.SpdxId
	}
	return ""
}

func (x *GitHubRepositoryLicense) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GitHubRepositoryLicense) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type GithubOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Login                                                 string                  `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Id                                                    uint32                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	NodeId                                                string                  `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Url                                                   string                  `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	ReposUrl                                              string                  `protobuf:"bytes,5,opt,name=repos_url,json=reposUrl,proto3" json:"repos_url,omitempty"`
	EventsUrl                                             string                  `protobuf:"bytes,6,opt,name=events_url,json=eventsUrl,proto3" json:"events_url,omitempty"`
	HooksUrl                                              string                  `protobuf:"bytes,7,opt,name=hooks_url,json=hooksUrl,proto3" json:"hooks_url,omitempty"`
	IssuesUrl                                             string                  `protobuf:"bytes,8,opt,name=issues_url,json=issuesUrl,proto3" json:"issues_url,omitempty"`
	MembersUrl                                            string                  `protobuf:"bytes,9,opt,name=members_url,json=membersUrl,proto3" json:"members_url,omitempty"`
	PublicMembersUrl                                      string                  `protobuf:"bytes,10,opt,name=public_members_url,json=publicMembersUrl,proto3" json:"public_members_url,omitempty"`
	AvatarUrl                                             string                  `protobuf:"bytes,11,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Description                                           string                  `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	Name                                                  string                  `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	Company                                               string                  `protobuf:"bytes,14,opt,name=company,proto3" json:"company,omitempty"`
	Blog                                                  string                  `protobuf:"bytes,15,opt,name=blog,proto3" json:"blog,omitempty"`
	Location                                              string                  `protobuf:"bytes,16,opt,name=location,proto3" json:"location,omitempty"`
	Email                                                 string                  `protobuf:"bytes,17,opt,name=email,proto3" json:"email,omitempty"`
	TwitterUsername                                       string                  `protobuf:"bytes,18,opt,name=twitter_username,json=twitterUsername,proto3" json:"twitter_username,omitempty"`
	IsVerified                                            bool                    `protobuf:"varint,19,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	HasOrganizationProjects                               bool                    `protobuf:"varint,20,opt,name=has_organization_projects,json=hasOrganizationProjects,proto3" json:"has_organization_projects,omitempty"`
	HasRepositoryProjects                                 bool                    `protobuf:"varint,21,opt,name=has_repository_projects,json=hasRepositoryProjects,proto3" json:"has_repository_projects,omitempty"`
	PublicRepos                                           uint32                  `protobuf:"varint,22,opt,name=public_repos,json=publicRepos,proto3" json:"public_repos,omitempty"`
	PublicGists                                           uint32                  `protobuf:"varint,23,opt,name=public_gists,json=publicGists,proto3" json:"public_gists,omitempty"`
	Followers                                             uint32                  `protobuf:"varint,24,opt,name=followers,proto3" json:"followers,omitempty"`
	Following                                             uint32                  `protobuf:"varint,25,opt,name=following,proto3" json:"following,omitempty"`
	HtmlUrl                                               string                  `protobuf:"bytes,26,opt,name=html_url,json=htmlUrl,proto3" json:"html_url,omitempty"`
	CreatedAt                                             *timestamppb.Timestamp  `protobuf:"bytes,27,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Type                                                  string                  `protobuf:"bytes,28,opt,name=type,proto3" json:"type,omitempty"`
	TotalPrivateRepos                                     uint32                  `protobuf:"varint,29,opt,name=total_private_repos,json=totalPrivateRepos,proto3" json:"total_private_repos,omitempty"`
	OwnedPrivateRepos                                     uint32                  `protobuf:"varint,30,opt,name=owned_private_repos,json=ownedPrivateRepos,proto3" json:"owned_private_repos,omitempty"`
	PrivateGists                                          uint32                  `protobuf:"varint,31,opt,name=private_gists,json=privateGists,proto3" json:"private_gists,omitempty"`
	DiskUsage                                             uint32                  `protobuf:"varint,32,opt,name=disk_usage,json=diskUsage,proto3" json:"disk_usage,omitempty"`
	Collaborators                                         uint32                  `protobuf:"varint,33,opt,name=collaborators,proto3" json:"collaborators,omitempty"`
	BillingEmail                                          string                  `protobuf:"bytes,34,opt,name=billing_email,json=billingEmail,proto3" json:"billing_email,omitempty"`
	Plan                                                  *GitHubOrganizationPlan `protobuf:"bytes,35,opt,name=plan,proto3" json:"plan,omitempty"`
	DefaultRepositoryPermission                           string                  `protobuf:"bytes,36,opt,name=default_repository_permission,json=defaultRepositoryPermission,proto3" json:"default_repository_permission,omitempty"`
	MembersCanCreateRepositories                          bool                    `protobuf:"varint,37,opt,name=members_can_create_repositories,json=membersCanCreateRepositories,proto3" json:"members_can_create_repositories,omitempty"`
	TwoFactorRequirementEnabled                           bool                    `protobuf:"varint,38,opt,name=two_factor_requirement_enabled,json=twoFactorRequirementEnabled,proto3" json:"two_factor_requirement_enabled,omitempty"`
	MembersAllowedRepositoryCreationType                  string                  `protobuf:"bytes,39,opt,name=members_allowed_repository_creation_type,json=membersAllowedRepositoryCreationType,proto3" json:"members_allowed_repository_creation_type,omitempty"`
	MembersCanCreatePublicRepositories                    bool                    `protobuf:"varint,40,opt,name=members_can_create_public_repositories,json=membersCanCreatePublicRepositories,proto3" json:"members_can_create_public_repositories,omitempty"`
	MembersCanCreatePrivateRepositories                   bool                    `protobuf:"varint,41,opt,name=members_can_create_private_repositories,json=membersCanCreatePrivateRepositories,proto3" json:"members_can_create_private_repositories,omitempty"`
	MembersCanCreateInternalRepositories                  bool                    `protobuf:"varint,42,opt,name=members_can_create_internal_repositories,json=membersCanCreateInternalRepositories,proto3" json:"members_can_create_internal_repositories,omitempty"`
	MembersCanCreatePages                                 bool                    `protobuf:"varint,43,opt,name=members_can_create_pages,json=membersCanCreatePages,proto3" json:"members_can_create_pages,omitempty"`
	MembersCanCreatePublicPages                           bool                    `protobuf:"varint,44,opt,name=members_can_create_public_pages,json=membersCanCreatePublicPages,proto3" json:"members_can_create_public_pages,omitempty"`
	MembersCanCreatePrivatePages                          bool                    `protobuf:"varint,45,opt,name=members_can_create_private_pages,json=membersCanCreatePrivatePages,proto3" json:"members_can_create_private_pages,omitempty"`
	MembersCanForkPrivateRepositories                     bool                    `protobuf:"varint,46,opt,name=members_can_fork_private_repositories,json=membersCanForkPrivateRepositories,proto3" json:"members_can_fork_private_repositories,omitempty"`
	WebCommitSignoffRequired                              bool                    `protobuf:"varint,47,opt,name=web_commit_signoff_required,json=webCommitSignoffRequired,proto3" json:"web_commit_signoff_required,omitempty"`
	UpdatedAt                                             *timestamppb.Timestamp  `protobuf:"bytes,48,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DependencyGraphEnabledForNewRepositories              bool                    `protobuf:"varint,49,opt,name=dependency_graph_enabled_for_new_repositories,json=dependencyGraphEnabledForNewRepositories,proto3" json:"dependency_graph_enabled_for_new_repositories,omitempty"`
	DependabotAlertsEnabledForNewRepositories             bool                    `protobuf:"varint,50,opt,name=dependabot_alerts_enabled_for_new_repositories,json=dependabotAlertsEnabledForNewRepositories,proto3" json:"dependabot_alerts_enabled_for_new_repositories,omitempty"`
	DependabotSecurityUpdatesEnabledForNewRepositories    bool                    `protobuf:"varint,51,opt,name=dependabot_security_updates_enabled_for_new_repositories,json=dependabotSecurityUpdatesEnabledForNewRepositories,proto3" json:"dependabot_security_updates_enabled_for_new_repositories,omitempty"`
	AdvancedSecurityEnabledForNewRepositories             bool                    `protobuf:"varint,52,opt,name=advanced_security_enabled_for_new_repositories,json=advancedSecurityEnabledForNewRepositories,proto3" json:"advanced_security_enabled_for_new_repositories,omitempty"`
	SecretScanningEnabledForNewRepositories               bool                    `protobuf:"varint,53,opt,name=secret_scanning_enabled_for_new_repositories,json=secretScanningEnabledForNewRepositories,proto3" json:"secret_scanning_enabled_for_new_repositories,omitempty"`
	SecretScanningPushProtectionEnabledForNewRepositories bool                    `protobuf:"varint,54,opt,name=secret_scanning_push_protection_enabled_for_new_repositories,json=secretScanningPushProtectionEnabledForNewRepositories,proto3" json:"secret_scanning_push_protection_enabled_for_new_repositories,omitempty"`
	SecretScanningPushProtectionCustomLink                bool                    `protobuf:"varint,55,opt,name=secret_scanning_push_protection_custom_link,json=secretScanningPushProtectionCustomLink,proto3" json:"secret_scanning_push_protection_custom_link,omitempty"`
	SecretScanningPushProtectionCustomLinkEnabled         string                  `protobuf:"bytes,56,opt,name=secret_scanning_push_protection_custom_link_enabled,json=secretScanningPushProtectionCustomLinkEnabled,proto3" json:"secret_scanning_push_protection_custom_link_enabled,omitempty"`
}

func (x *GithubOrganization) Reset() {
	*x = GithubOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_kon_github_actions_v1_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GithubOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GithubOrganization) ProtoMessage() {}

func (x *GithubOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_services_kon_github_actions_v1_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GithubOrganization.ProtoReflect.Descriptor instead.
func (*GithubOrganization) Descriptor() ([]byte, []int) {
	return file_services_kon_github_actions_v1_events_proto_rawDescGZIP(), []int{5}
}

func (x *GithubOrganization) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *GithubOrganization) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GithubOrganization) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *GithubOrganization) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GithubOrganization) GetReposUrl() string {
	if x != nil {
		return x.ReposUrl
	}
	return ""
}

func (x *GithubOrganization) GetEventsUrl() string {
	if x != nil {
		return x.EventsUrl
	}
	return ""
}

func (x *GithubOrganization) GetHooksUrl() string {
	if x != nil {
		return x.HooksUrl
	}
	return ""
}

func (x *GithubOrganization) GetIssuesUrl() string {
	if x != nil {
		return x.IssuesUrl
	}
	return ""
}

func (x *GithubOrganization) GetMembersUrl() string {
	if x != nil {
		return x.MembersUrl
	}
	return ""
}

func (x *GithubOrganization) GetPublicMembersUrl() string {
	if x != nil {
		return x.PublicMembersUrl
	}
	return ""
}

func (x *GithubOrganization) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *GithubOrganization) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GithubOrganization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GithubOrganization) GetCompany() string {
	if x != nil {
		return x.Company
	}
	return ""
}

func (x *GithubOrganization) GetBlog() string {
	if x != nil {
		return x.Blog
	}
	return ""
}

func (x *GithubOrganization) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *GithubOrganization) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GithubOrganization) GetTwitterUsername() string {
	if x != nil {
		return x.TwitterUsername
	}
	return ""
}

func (x *GithubOrganization) GetIsVerified() bool {
	if x != nil {
		return x.IsVerified
	}
	return false
}

func (x *GithubOrganization) GetHasOrganizationProjects() bool {
	if x != nil {
		return x.HasOrganizationProjects
	}
	return false
}

func (x *GithubOrganization) GetHasRepositoryProjects() bool {
	if x != nil {
		return x.HasRepositoryProjects
	}
	return false
}

func (x *GithubOrganization) GetPublicRepos() uint32 {
	if x != nil {
		return x.PublicRepos
	}
	return 0
}

func (x *GithubOrganization) GetPublicGists() uint32 {
	if x != nil {
		return x.PublicGists
	}
	return 0
}

func (x *GithubOrganization) GetFollowers() uint32 {
	if x != nil {
		return x.Followers
	}
	return 0
}

func (x *GithubOrganization) GetFollowing() uint32 {
	if x != nil {
		return x.Following
	}
	return 0
}

func (x *GithubOrganization) GetHtmlUrl() string {
	if x != nil {
		return x.HtmlUrl
	}
	return ""
}

func (x *GithubOrganization) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GithubOrganization) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GithubOrganization) GetTotalPrivateRepos() uint32 {
	if x != nil {
		return x.TotalPrivateRepos
	}
	return 0
}

func (x *GithubOrganization) GetOwnedPrivateRepos() uint32 {
	if x != nil {
		return x.OwnedPrivateRepos
	}
	return 0
}

func (x *GithubOrganization) GetPrivateGists() uint32 {
	if x != nil {
		return x.PrivateGists
	}
	return 0
}

func (x *GithubOrganization) GetDiskUsage() uint32 {
	if x != nil {
		return x.DiskUsage
	}
	return 0
}

func (x *GithubOrganization) GetCollaborators() uint32 {
	if x != nil {
		return x.Collaborators
	}
	return 0
}

func (x *GithubOrganization) GetBillingEmail() string {
	if x != nil {
		return x.BillingEmail
	}
	return ""
}

func (x *GithubOrganization) GetPlan() *GitHubOrganizationPlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *GithubOrganization) GetDefaultRepositoryPermission() string {
	if x != nil {
		return x.DefaultRepositoryPermission
	}
	return ""
}

func (x *GithubOrganization) GetMembersCanCreateRepositories() bool {
	if x != nil {
		return x.MembersCanCreateRepositories
	}
	return false
}

func (x *GithubOrganization) GetTwoFactorRequirementEnabled() bool {
	if x != nil {
		return x.TwoFactorRequirementEnabled
	}
	return false
}

func (x *GithubOrganization) GetMembersAllowedRepositoryCreationType() string {
	if x != nil {
		return x.MembersAllowedRepositoryCreationType
	}
	return ""
}

func (x *GithubOrganization) GetMembersCanCreatePublicRepositories() bool {
	if x != nil {
		return x.MembersCanCreatePublicRepositories
	}
	return false
}

func (x *GithubOrganization) GetMembersCanCreatePrivateRepositories() bool {
	if x != nil {
		return x.MembersCanCreatePrivateRepositories
	}
	return false
}

func (x *GithubOrganization) GetMembersCanCreateInternalRepositories() bool {
	if x != nil {
		return x.MembersCanCreateInternalRepositories
	}
	return false
}

func (x *GithubOrganization) GetMembersCanCreatePages() bool {
	if x != nil {
		return x.MembersCanCreatePages
	}
	return false
}

func (x *GithubOrganization) GetMembersCanCreatePublicPages() bool {
	if x != nil {
		return x.MembersCanCreatePublicPages
	}
	return false
}

func (x *GithubOrganization) GetMembersCanCreatePrivatePages() bool {
	if x != nil {
		return x.MembersCanCreatePrivatePages
	}
	return false
}

func (x *GithubOrganization) GetMembersCanForkPrivateRepositories() bool {
	if x != nil {
		return x.MembersCanForkPrivateRepositories
	}
	return false
}

func (x *GithubOrganization) GetWebCommitSignoffRequired() bool {
	if x != nil {
		return x.WebCommitSignoffRequired
	}
	return false
}

func (x *GithubOrganization) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GithubOrganization) GetDependencyGraphEnabledForNewRepositories() bool {
	if x != nil {
		return x.DependencyGraphEnabledForNewRepositories
	}
	return false
}

func (x *GithubOrganization) GetDependabotAlertsEnabledForNewRepositories() bool {
	if x != nil {
		return x.DependabotAlertsEnabledForNewRepositories
	}
	return false
}

func (x *GithubOrganization) GetDependabotSecurityUpdatesEnabledForNewRepositories() bool {
	if x != nil {
		return x.DependabotSecurityUpdatesEnabledForNewRepositories
	}
	return false
}

func (x *GithubOrganization) GetAdvancedSecurityEnabledForNewRepositories() bool {
	if x != nil {
		return x.AdvancedSecurityEnabledForNewRepositories
	}
	return false
}

func (x *GithubOrganization) GetSecretScanningEnabledForNewRepositories() bool {
	if x != nil {
		return x.SecretScanningEnabledForNewRepositories
	}
	return false
}

func (x *GithubOrganization) GetSecretScanningPushProtectionEnabledForNewRepositories() bool {
	if x != nil {
		return x.SecretScanningPushProtectionEnabledForNewRepositories
	}
	return false
}

func (x *GithubOrganization) GetSecretScanningPushProtectionCustomLink() bool {
	if x != nil {
		return x.SecretScanningPushProtectionCustomLink
	}
	return false
}

func (x *GithubOrganization) GetSecretScanningPushProtectionCustomLinkEnabled() string {
	if x != nil {
		return x.SecretScanningPushProtectionCustomLinkEnabled
	}
	return ""
}

type GitHubOrganizationPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Space        uint32 `protobuf:"varint,2,opt,name=space,proto3" json:"space,omitempty"`
	PrivateRepos uint32 `protobuf:"varint,3,opt,name=private_repos,json=privateRepos,proto3" json:"private_repos,omitempty"`
	FilledSeats  uint32 `protobuf:"varint,4,opt,name=filled_seats,json=filledSeats,proto3" json:"filled_seats,omitempty"`
	Seats        uint32 `protobuf:"varint,5,opt,name=seats,proto3" json:"seats,omitempty"`
}

func (x *GitHubOrganizationPlan) Reset() {
	*x = GitHubOrganizationPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_kon_github_actions_v1_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitHubOrganizationPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitHubOrganizationPlan) ProtoMessage() {}

func (x *GitHubOrganizationPlan) ProtoReflect() protoreflect.Message {
	mi := &file_services_kon_github_actions_v1_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitHubOrganizationPlan.ProtoReflect.Descriptor instead.
func (*GitHubOrganizationPlan) Descriptor() ([]byte, []int) {
	return file_services_kon_github_actions_v1_events_proto_rawDescGZIP(), []int{6}
}

func (x *GitHubOrganizationPlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GitHubOrganizationPlan) GetSpace() uint32 {
	if x != nil {
		return x.Space
	}
	return 0
}

func (x *GitHubOrganizationPlan) GetPrivateRepos() uint32 {
	if x != nil {
		return x.PrivateRepos
	}
	return 0
}

func (x *GitHubOrganizationPlan) GetFilledSeats() uint32 {
	if x != nil {
		return x.FilledSeats
	}
	return 0
}

func (x *GitHubOrganizationPlan) GetSeats() uint32 {
	if x != nil {
		return x.Seats
	}
	return 0
}

type GitHubAppInstallation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeId string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *GitHubAppInstallation) Reset() {
	*x = GitHubAppInstallation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_kon_github_actions_v1_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitHubAppInstallation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitHubAppInstallation) ProtoMessage() {}

func (x *GitHubAppInstallation) ProtoReflect() protoreflect.Message {
	mi := &file_services_kon_github_actions_v1_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitHubAppInstallation.ProtoReflect.Descriptor instead.
func (*GitHubAppInstallation) Descriptor() ([]byte, []int) {
	return file_services_kon_github_actions_v1_events_proto_rawDescGZIP(), []int{7}
}

func (x *GitHubAppInstallation) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GitHubAppInstallation) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

var File_services_kon_github_actions_v1_events_proto protoreflect.FileDescriptor

var file_services_kon_github_actions_v1_events_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6b, 0x6f, 0x6e, 0x65, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6b, 0x6f, 0x6e, 0x65, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x03, 0x0a, 0x12, 0x47, 0x69, 0x74, 0x48, 0x75,
	0x62, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x6b, 0x6f, 0x6e, 0x65, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6b, 0x6f, 0x6e, 0x65, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x69, 0x74, 0x48, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x59, 0x0a, 0x0d, 0x6f,
	0x72, 0x67, 0x72, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6b, 0x6f,
	0x6e, 0x65, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6f, 0x72, 0x67, 0x72, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6b, 0x6f, 0x6e, 0x65, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x69, 0x74, 0x48, 0x75, 0x62, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xc7, 0x04, 0x0a, 0x18, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x67, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x19, 0x0a, 0x08, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x68, 0x74, 0x6d, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x55, 0x72, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x69, 0x73, 0x74, 0x73, 0x55,
	0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64,
	0x55, 0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x72, 0x6c,
	0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x73, 0x69, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0x82, 0x16, 0x0a,
	0x10, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x6b, 0x6f, 0x6e, 0x65, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x74, 0x6d, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x66, 0x6f, 0x72, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6b, 0x73, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6b, 0x73,
	0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x2b,
	0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x65, 0x61, 0x6d, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6f, 0x6b,
	0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6f,
	0x6b, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x72, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x73,
	0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x73, 0x55, 0x72,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x20,
	0x0a, 0x0c, 0x67, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x69, 0x74, 0x54, 0x61, 0x67, 0x73, 0x55, 0x72, 0x6c,
	0x12, 0x20, 0x0a, 0x0c, 0x67, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x73, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x69, 0x74, 0x52, 0x65, 0x66, 0x73, 0x55,
	0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x73, 0x55, 0x72, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x55,
	0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x67,
	0x61, 0x7a, 0x65, 0x72, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x7a, 0x65, 0x72, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x55,
	0x72, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x26,
	0x0a, 0x0f, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x75, 0x6c, 0x6c, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x75, 0x6c, 0x6c, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69,
	0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x55, 0x72,
	0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x55, 0x72, 0x6c,
	0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x37, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x69, 0x74, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x69, 0x74, 0x55, 0x72,
	0x6c, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x73, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x73, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x6f, 0x6e, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x6f, 0x6e, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x76, 0x6e, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x76, 0x6e, 0x55, 0x72, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x67, 0x61, 0x7a, 0x65, 0x72, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x67, 0x61, 0x7a, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x39, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x61, 0x73, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x77, 0x69, 0x6b,
	0x69, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x57, 0x69, 0x6b, 0x69,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x40, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x44, 0x69, 0x73, 0x63, 0x75,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6b, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x6f, 0x72,
	0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x09, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x52, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6b, 0x6f, 0x6e,
	0x65, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x47, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x46, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x48, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x1b, 0x77, 0x65,
	0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x66, 0x66,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x49, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x18, 0x77, 0x65, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x6f, 0x66,
	0x66, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x73, 0x18, 0x4a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x6b, 0x73,
	0x18, 0x4c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x4d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x4f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x22, 0xc4, 0x04, 0x0a, 0x15, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x67, 0x72, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x68, 0x74, 0x6d, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x55, 0x72,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x69, 0x73, 0x74, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x72, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12,
	0x2b, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x11,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x74,
	0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73,
	0x69, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0x83, 0x01, 0x0a, 0x17, 0x47, 0x69, 0x74,
	0x48, 0x75, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70,
	0x64, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x64,
	0x78, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0xc8,
	0x17, 0x0a, 0x12, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x55,
	0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x55, 0x72, 0x6c, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x55, 0x72, 0x6c, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x6c, 0x6f, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6c, 0x6f, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x77,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x3a,
	0x0a, 0x19, 0x68, 0x61, 0x73, 0x5f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x68, 0x61, 0x73, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x68, 0x61,
	0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x68, 0x61, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x67, 0x69, 0x73, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x47, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x74, 0x6d, 0x6c, 0x55, 0x72, 0x6c, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6f, 0x77, 0x6e,
	0x65, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x47, 0x69,
	0x73, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x75, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x4b, 0x0a,
	0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6b, 0x6f, 0x6e, 0x65, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x69,
	0x74, 0x48, 0x75, 0x62, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x12, 0x42, 0x0a, 0x1d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x1f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x43, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x74, 0x77, 0x6f, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x74,
	0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x28, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x24, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x52, 0x0a, 0x26, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x61,
	0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x22, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x27, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x43, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x28,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f,
	0x63, 0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43,
	0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x44, 0x0a,
	0x1f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43,
	0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x63,
	0x61, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x25, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x43, 0x61, 0x6e, 0x46, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x1b, 0x77, 0x65, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x6f, 0x66, 0x66, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x18, 0x77, 0x65, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x6f, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x5f, 0x0a, 0x2d, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x28,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x2e, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x61, 0x62, 0x6f, 0x74, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x29, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6f, 0x74, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x77, 0x52,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x74, 0x0a, 0x38, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x32, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6f, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46,
	0x6f, 0x72, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x61, 0x0a, 0x2e, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x08, 0x52, 0x29, 0x61, 0x64, 0x76, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x2c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x73,
	0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x7b, 0x0a, 0x3c, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x63,
	0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x35, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x73, 0x68, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x6f,
	0x72, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x5b, 0x0a, 0x2b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x63, 0x61,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x73, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x6a, 0x0a,
	0x33, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x2d, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x73, 0x68, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x69,
	0x6e, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x16, 0x47, 0x69,
	0x74, 0x48, 0x75, 0x62, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6c, 0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x65,
	0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x53, 0x65, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x61, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x65, 0x61, 0x74, 0x73, 0x22, 0x40, 0x0a, 0x15,
	0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x32, 0x5b,
	0x0a, 0x1c, 0x47, 0x69, 0x74, 0x48, 0x75, 0x62, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b,
	0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0xa5, 0x02, 0x0a, 0x23,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6b, 0x6f, 0x6e,
	0x65, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x31, 0x42, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x69, 0x73, 0x68, 0x2f, 0x4f, 0x70, 0x65, 0x6e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x6b, 0x6f, 0x6e, 0x65, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x4b, 0x47,
	0xaa, 0x02, 0x1e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4b, 0x6f, 0x6e, 0x65,
	0x2e, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x1e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5c, 0x4b, 0x6f, 0x6e,
	0x65, 0x5c, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x2a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5c, 0x4b, 0x6f,
	0x6e, 0x65, 0x5c, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x21, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3a, 0x3a, 0x4b, 0x6f, 0x6e, 0x65,
	0x3a, 0x3a, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a,
	0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_kon_github_actions_v1_events_proto_rawDescOnce sync.Once
	file_services_kon_github_actions_v1_events_proto_rawDescData = file_services_kon_github_actions_v1_events_proto_rawDesc
)

func file_services_kon_github_actions_v1_events_proto_rawDescGZIP() []byte {
	file_services_kon_github_actions_v1_events_proto_rawDescOnce.Do(func() {
		file_services_kon_github_actions_v1_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_kon_github_actions_v1_events_proto_rawDescData)
	})
	return file_services_kon_github_actions_v1_events_proto_rawDescData
}

var file_services_kon_github_actions_v1_events_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_services_kon_github_actions_v1_events_proto_goTypes = []interface{}{
	(*GitHubWebhookEvent)(nil),       // 0: services.kon.github_actions.v1.GitHubWebhookEvent
	(*GitHubWebhookEventSender)(nil), // 1: services.kon.github_actions.v1.GitHubWebhookEventSender
	(*GitHubRepository)(nil),         // 2: services.kon.github_actions.v1.GitHubRepository
	(*GitHubRepositoryOwner)(nil),    // 3: services.kon.github_actions.v1.GitHubRepositoryOwner
	(*GitHubRepositoryLicense)(nil),  // 4: services.kon.github_actions.v1.GitHubRepositoryLicense
	(*GithubOrganization)(nil),       // 5: services.kon.github_actions.v1.GithubOrganization
	(*GitHubOrganizationPlan)(nil),   // 6: services.kon.github_actions.v1.GitHubOrganizationPlan
	(*GitHubAppInstallation)(nil),    // 7: services.kon.github_actions.v1.GitHubAppInstallation
	(*timestamppb.Timestamp)(nil),    // 8: google.protobuf.Timestamp
	(*anypb.Any)(nil),                // 9: google.protobuf.Any
	(*structpb.Struct)(nil),          // 10: google.protobuf.Struct
	(*emptypb.Empty)(nil),            // 11: google.protobuf.Empty
}
var file_services_kon_github_actions_v1_events_proto_depIdxs = []int32{
	1,  // 0: services.kon.github_actions.v1.GitHubWebhookEvent.sender:type_name -> services.kon.github_actions.v1.GitHubWebhookEventSender
	2,  // 1: services.kon.github_actions.v1.GitHubWebhookEvent.repository:type_name -> services.kon.github_actions.v1.GitHubRepository
	5,  // 2: services.kon.github_actions.v1.GitHubWebhookEvent.orgranization:type_name -> services.kon.github_actions.v1.GithubOrganization
	7,  // 3: services.kon.github_actions.v1.GitHubWebhookEvent.installation:type_name -> services.kon.github_actions.v1.GitHubAppInstallation
	3,  // 4: services.kon.github_actions.v1.GitHubRepository.owner:type_name -> services.kon.github_actions.v1.GitHubRepositoryOwner
	8,  // 5: services.kon.github_actions.v1.GitHubRepository.created_at:type_name -> google.protobuf.Timestamp
	8,  // 6: services.kon.github_actions.v1.GitHubRepository.updated_at:type_name -> google.protobuf.Timestamp
	8,  // 7: services.kon.github_actions.v1.GitHubRepository.pushed_at:type_name -> google.protobuf.Timestamp
	9,  // 8: services.kon.github_actions.v1.GitHubRepository.mirror_url:type_name -> google.protobuf.Any
	4,  // 9: services.kon.github_actions.v1.GitHubRepository.license:type_name -> services.kon.github_actions.v1.GitHubRepositoryLicense
	9,  // 10: services.kon.github_actions.v1.GitHubRepository.topics:type_name -> google.protobuf.Any
	8,  // 11: services.kon.github_actions.v1.GithubOrganization.created_at:type_name -> google.protobuf.Timestamp
	6,  // 12: services.kon.github_actions.v1.GithubOrganization.plan:type_name -> services.kon.github_actions.v1.GitHubOrganizationPlan
	8,  // 13: services.kon.github_actions.v1.GithubOrganization.updated_at:type_name -> google.protobuf.Timestamp
	10, // 14: services.kon.github_actions.v1.GitHubWebhookListenerService.Listen:input_type -> google.protobuf.Struct
	11, // 15: services.kon.github_actions.v1.GitHubWebhookListenerService.Listen:output_type -> google.protobuf.Empty
	15, // [15:16] is the sub-list for method output_type
	14, // [14:15] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_services_kon_github_actions_v1_events_proto_init() }
func file_services_kon_github_actions_v1_events_proto_init() {
	if File_services_kon_github_actions_v1_events_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_kon_github_actions_v1_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitHubWebhookEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_kon_github_actions_v1_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitHubWebhookEventSender); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_kon_github_actions_v1_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitHubRepository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_kon_github_actions_v1_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitHubRepositoryOwner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_kon_github_actions_v1_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitHubRepositoryLicense); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_kon_github_actions_v1_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GithubOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_kon_github_actions_v1_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitHubOrganizationPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_kon_github_actions_v1_events_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitHubAppInstallation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_kon_github_actions_v1_events_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_kon_github_actions_v1_events_proto_goTypes,
		DependencyIndexes: file_services_kon_github_actions_v1_events_proto_depIdxs,
		MessageInfos:      file_services_kon_github_actions_v1_events_proto_msgTypes,
	}.Build()
	File_services_kon_github_actions_v1_events_proto = out.File
	file_services_kon_github_actions_v1_events_proto_rawDesc = nil
	file_services_kon_github_actions_v1_events_proto_goTypes = nil
	file_services_kon_github_actions_v1_events_proto_depIdxs = nil
}
