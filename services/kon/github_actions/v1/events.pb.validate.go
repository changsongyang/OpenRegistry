// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/kon/github_actions/v1/events.proto

package github_actions_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GitHubWebhookEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitHubWebhookEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitHubWebhookEvent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitHubWebhookEventMultiError, or nil if none found.
func (m *GitHubWebhookEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *GitHubWebhookEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Action

	if all {
		switch v := interface{}(m.GetSender()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GitHubWebhookEventValidationError{
					field:  "Sender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GitHubWebhookEventValidationError{
					field:  "Sender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSender()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GitHubWebhookEventValidationError{
				field:  "Sender",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRepository()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GitHubWebhookEventValidationError{
					field:  "Repository",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GitHubWebhookEventValidationError{
					field:  "Repository",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRepository()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GitHubWebhookEventValidationError{
				field:  "Repository",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOrgranization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GitHubWebhookEventValidationError{
					field:  "Orgranization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GitHubWebhookEventValidationError{
					field:  "Orgranization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrgranization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GitHubWebhookEventValidationError{
				field:  "Orgranization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInstallation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GitHubWebhookEventValidationError{
					field:  "Installation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GitHubWebhookEventValidationError{
					field:  "Installation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInstallation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GitHubWebhookEventValidationError{
				field:  "Installation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GitHubWebhookEventMultiError(errors)
	}

	return nil
}

// GitHubWebhookEventMultiError is an error wrapping multiple validation errors
// returned by GitHubWebhookEvent.ValidateAll() if the designated constraints
// aren't met.
type GitHubWebhookEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitHubWebhookEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitHubWebhookEventMultiError) AllErrors() []error { return m }

// GitHubWebhookEventValidationError is the validation error returned by
// GitHubWebhookEvent.Validate if the designated constraints aren't met.
type GitHubWebhookEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitHubWebhookEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitHubWebhookEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitHubWebhookEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitHubWebhookEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitHubWebhookEventValidationError) ErrorName() string {
	return "GitHubWebhookEventValidationError"
}

// Error satisfies the builtin error interface
func (e GitHubWebhookEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitHubWebhookEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitHubWebhookEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitHubWebhookEventValidationError{}

// Validate checks the field values on GitHubWebhookEventSender with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitHubWebhookEventSender) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitHubWebhookEventSender with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitHubWebhookEventSenderMultiError, or nil if none found.
func (m *GitHubWebhookEventSender) ValidateAll() error {
	return m.validate(true)
}

func (m *GitHubWebhookEventSender) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	// no validation rules for Id

	// no validation rules for NodeId

	// no validation rules for AvatarUrl

	// no validation rules for GravatarId

	// no validation rules for Url

	// no validation rules for HtmlUrl

	// no validation rules for FollowersUrl

	// no validation rules for FollowingUrl

	// no validation rules for GistsUrl

	// no validation rules for StarredUrl

	// no validation rules for SubscriptionsUrl

	// no validation rules for OrganizationsUrl

	// no validation rules for ReposUrl

	// no validation rules for EventsUrl

	// no validation rules for ReceivedEventsUrl

	// no validation rules for Type

	// no validation rules for SiteAdmin

	if len(errors) > 0 {
		return GitHubWebhookEventSenderMultiError(errors)
	}

	return nil
}

// GitHubWebhookEventSenderMultiError is an error wrapping multiple validation
// errors returned by GitHubWebhookEventSender.ValidateAll() if the designated
// constraints aren't met.
type GitHubWebhookEventSenderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitHubWebhookEventSenderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitHubWebhookEventSenderMultiError) AllErrors() []error { return m }

// GitHubWebhookEventSenderValidationError is the validation error returned by
// GitHubWebhookEventSender.Validate if the designated constraints aren't met.
type GitHubWebhookEventSenderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitHubWebhookEventSenderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitHubWebhookEventSenderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitHubWebhookEventSenderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitHubWebhookEventSenderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitHubWebhookEventSenderValidationError) ErrorName() string {
	return "GitHubWebhookEventSenderValidationError"
}

// Error satisfies the builtin error interface
func (e GitHubWebhookEventSenderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitHubWebhookEventSender.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitHubWebhookEventSenderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitHubWebhookEventSenderValidationError{}

// Validate checks the field values on GitHubRepository with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GitHubRepository) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitHubRepository with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitHubRepositoryMultiError, or nil if none found.
func (m *GitHubRepository) ValidateAll() error {
	return m.validate(true)
}

func (m *GitHubRepository) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for NodeId

	// no validation rules for Name

	// no validation rules for FullName

	// no validation rules for Private

	if all {
		switch v := interface{}(m.GetOwner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GitHubRepositoryValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GitHubRepositoryValidationError{
					field:  "Owner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOwner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GitHubRepositoryValidationError{
				field:  "Owner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for HtmlUrl

	// no validation rules for Description

	// no validation rules for Fork

	// no validation rules for Url

	// no validation rules for ForksUrl

	// no validation rules for KeysUrl

	// no validation rules for CollaboratorsUrl

	// no validation rules for TeamsUrl

	// no validation rules for HooksUrl

	// no validation rules for IssueEventsUrl

	// no validation rules for EventsUrl

	// no validation rules for AssigneesUrl

	// no validation rules for BranchesUrl

	// no validation rules for TagsUrl

	// no validation rules for BlobsUrl

	// no validation rules for GitTagsUrl

	// no validation rules for GitRefsUrl

	// no validation rules for TreesUrl

	// no validation rules for StatusesUrl

	// no validation rules for LanguagesUrl

	// no validation rules for StargazersUrl

	// no validation rules for ContributorsUrl

	// no validation rules for SubscribersUrl

	// no validation rules for SubscriptionUrl

	// no validation rules for CommitsUrl

	// no validation rules for GitCommitsUrl

	// no validation rules for CommentsUrl

	// no validation rules for IssueCommentUrl

	// no validation rules for ContentsUrl

	// no validation rules for CompareUrl

	// no validation rules for MergesUrl

	// no validation rules for ArchiveUrl

	// no validation rules for DownloadsUrl

	// no validation rules for IssuesUrl

	// no validation rules for PullsUrl

	// no validation rules for MilestonesUrl

	// no validation rules for NotificationsUrl

	// no validation rules for LabelsUrl

	// no validation rules for ReleasesUrl

	// no validation rules for DeploymentsUrl

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GitHubRepositoryValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GitHubRepositoryValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GitHubRepositoryValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GitHubRepositoryValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GitHubRepositoryValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GitHubRepositoryValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPushedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GitHubRepositoryValidationError{
					field:  "PushedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GitHubRepositoryValidationError{
					field:  "PushedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPushedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GitHubRepositoryValidationError{
				field:  "PushedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for GitUrl

	// no validation rules for SshUrl

	// no validation rules for CloneUrl

	// no validation rules for SvnUrl

	// no validation rules for Homepage

	// no validation rules for Size

	// no validation rules for StargazersCount

	// no validation rules for WatchersCount

	// no validation rules for Language

	// no validation rules for HasIssues

	// no validation rules for HasProjects

	// no validation rules for HasDownloads

	// no validation rules for HasWiki

	// no validation rules for HasPages

	// no validation rules for HasDiscussions

	// no validation rules for ForksCount

	if all {
		switch v := interface{}(m.GetMirrorUrl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GitHubRepositoryValidationError{
					field:  "MirrorUrl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GitHubRepositoryValidationError{
					field:  "MirrorUrl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMirrorUrl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GitHubRepositoryValidationError{
				field:  "MirrorUrl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Archived

	// no validation rules for Disabled

	// no validation rules for OpenIssuesCount

	if all {
		switch v := interface{}(m.GetLicense()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GitHubRepositoryValidationError{
					field:  "License",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GitHubRepositoryValidationError{
					field:  "License",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLicense()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GitHubRepositoryValidationError{
				field:  "License",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AllowForking

	// no validation rules for IsTemplate

	// no validation rules for WebCommitSignoffRequired

	for idx, item := range m.GetTopics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GitHubRepositoryValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GitHubRepositoryValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GitHubRepositoryValidationError{
					field:  fmt.Sprintf("Topics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Visibility

	// no validation rules for Forks

	// no validation rules for OpenIssues

	// no validation rules for Watchers

	// no validation rules for DefaultBranch

	if len(errors) > 0 {
		return GitHubRepositoryMultiError(errors)
	}

	return nil
}

// GitHubRepositoryMultiError is an error wrapping multiple validation errors
// returned by GitHubRepository.ValidateAll() if the designated constraints
// aren't met.
type GitHubRepositoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitHubRepositoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitHubRepositoryMultiError) AllErrors() []error { return m }

// GitHubRepositoryValidationError is the validation error returned by
// GitHubRepository.Validate if the designated constraints aren't met.
type GitHubRepositoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitHubRepositoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitHubRepositoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitHubRepositoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitHubRepositoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitHubRepositoryValidationError) ErrorName() string { return "GitHubRepositoryValidationError" }

// Error satisfies the builtin error interface
func (e GitHubRepositoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitHubRepository.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitHubRepositoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitHubRepositoryValidationError{}

// Validate checks the field values on GitHubRepositoryOwner with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitHubRepositoryOwner) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitHubRepositoryOwner with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitHubRepositoryOwnerMultiError, or nil if none found.
func (m *GitHubRepositoryOwner) ValidateAll() error {
	return m.validate(true)
}

func (m *GitHubRepositoryOwner) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	// no validation rules for Id

	// no validation rules for NodeId

	// no validation rules for AvatarUrl

	// no validation rules for GravatarId

	// no validation rules for Url

	// no validation rules for HtmlUrl

	// no validation rules for FollowersUrl

	// no validation rules for FollowingUrl

	// no validation rules for GistsUrl

	// no validation rules for StarredUrl

	// no validation rules for SubscriptionsUrl

	// no validation rules for OrganizationsUrl

	// no validation rules for ReposUrl

	// no validation rules for EventsUrl

	// no validation rules for ReceivedEventsUrl

	// no validation rules for Type

	// no validation rules for SiteAdmin

	if len(errors) > 0 {
		return GitHubRepositoryOwnerMultiError(errors)
	}

	return nil
}

// GitHubRepositoryOwnerMultiError is an error wrapping multiple validation
// errors returned by GitHubRepositoryOwner.ValidateAll() if the designated
// constraints aren't met.
type GitHubRepositoryOwnerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitHubRepositoryOwnerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitHubRepositoryOwnerMultiError) AllErrors() []error { return m }

// GitHubRepositoryOwnerValidationError is the validation error returned by
// GitHubRepositoryOwner.Validate if the designated constraints aren't met.
type GitHubRepositoryOwnerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitHubRepositoryOwnerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitHubRepositoryOwnerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitHubRepositoryOwnerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitHubRepositoryOwnerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitHubRepositoryOwnerValidationError) ErrorName() string {
	return "GitHubRepositoryOwnerValidationError"
}

// Error satisfies the builtin error interface
func (e GitHubRepositoryOwnerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitHubRepositoryOwner.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitHubRepositoryOwnerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitHubRepositoryOwnerValidationError{}

// Validate checks the field values on GitHubRepositoryLicense with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitHubRepositoryLicense) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitHubRepositoryLicense with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitHubRepositoryLicenseMultiError, or nil if none found.
func (m *GitHubRepositoryLicense) ValidateAll() error {
	return m.validate(true)
}

func (m *GitHubRepositoryLicense) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Name

	// no validation rules for SpdxId

	// no validation rules for Url

	// no validation rules for NodeId

	if len(errors) > 0 {
		return GitHubRepositoryLicenseMultiError(errors)
	}

	return nil
}

// GitHubRepositoryLicenseMultiError is an error wrapping multiple validation
// errors returned by GitHubRepositoryLicense.ValidateAll() if the designated
// constraints aren't met.
type GitHubRepositoryLicenseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitHubRepositoryLicenseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitHubRepositoryLicenseMultiError) AllErrors() []error { return m }

// GitHubRepositoryLicenseValidationError is the validation error returned by
// GitHubRepositoryLicense.Validate if the designated constraints aren't met.
type GitHubRepositoryLicenseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitHubRepositoryLicenseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitHubRepositoryLicenseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitHubRepositoryLicenseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitHubRepositoryLicenseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitHubRepositoryLicenseValidationError) ErrorName() string {
	return "GitHubRepositoryLicenseValidationError"
}

// Error satisfies the builtin error interface
func (e GitHubRepositoryLicenseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitHubRepositoryLicense.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitHubRepositoryLicenseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitHubRepositoryLicenseValidationError{}

// Validate checks the field values on GithubOrganization with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GithubOrganization) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GithubOrganization with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GithubOrganizationMultiError, or nil if none found.
func (m *GithubOrganization) ValidateAll() error {
	return m.validate(true)
}

func (m *GithubOrganization) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Login

	// no validation rules for Id

	// no validation rules for NodeId

	// no validation rules for Url

	// no validation rules for ReposUrl

	// no validation rules for EventsUrl

	// no validation rules for HooksUrl

	// no validation rules for IssuesUrl

	// no validation rules for MembersUrl

	// no validation rules for PublicMembersUrl

	// no validation rules for AvatarUrl

	// no validation rules for Description

	// no validation rules for Name

	// no validation rules for Company

	// no validation rules for Blog

	// no validation rules for Location

	// no validation rules for Email

	// no validation rules for TwitterUsername

	// no validation rules for IsVerified

	// no validation rules for HasOrganizationProjects

	// no validation rules for HasRepositoryProjects

	// no validation rules for PublicRepos

	// no validation rules for PublicGists

	// no validation rules for Followers

	// no validation rules for Following

	// no validation rules for HtmlUrl

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GithubOrganizationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GithubOrganizationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GithubOrganizationValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for TotalPrivateRepos

	// no validation rules for OwnedPrivateRepos

	// no validation rules for PrivateGists

	// no validation rules for DiskUsage

	// no validation rules for Collaborators

	// no validation rules for BillingEmail

	if all {
		switch v := interface{}(m.GetPlan()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GithubOrganizationValidationError{
					field:  "Plan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GithubOrganizationValidationError{
					field:  "Plan",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlan()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GithubOrganizationValidationError{
				field:  "Plan",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DefaultRepositoryPermission

	// no validation rules for MembersCanCreateRepositories

	// no validation rules for TwoFactorRequirementEnabled

	// no validation rules for MembersAllowedRepositoryCreationType

	// no validation rules for MembersCanCreatePublicRepositories

	// no validation rules for MembersCanCreatePrivateRepositories

	// no validation rules for MembersCanCreateInternalRepositories

	// no validation rules for MembersCanCreatePages

	// no validation rules for MembersCanCreatePublicPages

	// no validation rules for MembersCanCreatePrivatePages

	// no validation rules for MembersCanForkPrivateRepositories

	// no validation rules for WebCommitSignoffRequired

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GithubOrganizationValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GithubOrganizationValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GithubOrganizationValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DependencyGraphEnabledForNewRepositories

	// no validation rules for DependabotAlertsEnabledForNewRepositories

	// no validation rules for DependabotSecurityUpdatesEnabledForNewRepositories

	// no validation rules for AdvancedSecurityEnabledForNewRepositories

	// no validation rules for SecretScanningEnabledForNewRepositories

	// no validation rules for SecretScanningPushProtectionEnabledForNewRepositories

	// no validation rules for SecretScanningPushProtectionCustomLink

	// no validation rules for SecretScanningPushProtectionCustomLinkEnabled

	if len(errors) > 0 {
		return GithubOrganizationMultiError(errors)
	}

	return nil
}

// GithubOrganizationMultiError is an error wrapping multiple validation errors
// returned by GithubOrganization.ValidateAll() if the designated constraints
// aren't met.
type GithubOrganizationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GithubOrganizationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GithubOrganizationMultiError) AllErrors() []error { return m }

// GithubOrganizationValidationError is the validation error returned by
// GithubOrganization.Validate if the designated constraints aren't met.
type GithubOrganizationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GithubOrganizationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GithubOrganizationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GithubOrganizationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GithubOrganizationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GithubOrganizationValidationError) ErrorName() string {
	return "GithubOrganizationValidationError"
}

// Error satisfies the builtin error interface
func (e GithubOrganizationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGithubOrganization.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GithubOrganizationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GithubOrganizationValidationError{}

// Validate checks the field values on GitHubOrganizationPlan with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitHubOrganizationPlan) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitHubOrganizationPlan with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitHubOrganizationPlanMultiError, or nil if none found.
func (m *GitHubOrganizationPlan) ValidateAll() error {
	return m.validate(true)
}

func (m *GitHubOrganizationPlan) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Space

	// no validation rules for PrivateRepos

	// no validation rules for FilledSeats

	// no validation rules for Seats

	if len(errors) > 0 {
		return GitHubOrganizationPlanMultiError(errors)
	}

	return nil
}

// GitHubOrganizationPlanMultiError is an error wrapping multiple validation
// errors returned by GitHubOrganizationPlan.ValidateAll() if the designated
// constraints aren't met.
type GitHubOrganizationPlanMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitHubOrganizationPlanMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitHubOrganizationPlanMultiError) AllErrors() []error { return m }

// GitHubOrganizationPlanValidationError is the validation error returned by
// GitHubOrganizationPlan.Validate if the designated constraints aren't met.
type GitHubOrganizationPlanValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitHubOrganizationPlanValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitHubOrganizationPlanValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitHubOrganizationPlanValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitHubOrganizationPlanValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitHubOrganizationPlanValidationError) ErrorName() string {
	return "GitHubOrganizationPlanValidationError"
}

// Error satisfies the builtin error interface
func (e GitHubOrganizationPlanValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitHubOrganizationPlan.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitHubOrganizationPlanValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitHubOrganizationPlanValidationError{}

// Validate checks the field values on GitHubAppInstallation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GitHubAppInstallation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GitHubAppInstallation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GitHubAppInstallationMultiError, or nil if none found.
func (m *GitHubAppInstallation) ValidateAll() error {
	return m.validate(true)
}

func (m *GitHubAppInstallation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for NodeId

	if len(errors) > 0 {
		return GitHubAppInstallationMultiError(errors)
	}

	return nil
}

// GitHubAppInstallationMultiError is an error wrapping multiple validation
// errors returned by GitHubAppInstallation.ValidateAll() if the designated
// constraints aren't met.
type GitHubAppInstallationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GitHubAppInstallationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GitHubAppInstallationMultiError) AllErrors() []error { return m }

// GitHubAppInstallationValidationError is the validation error returned by
// GitHubAppInstallation.Validate if the designated constraints aren't met.
type GitHubAppInstallationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GitHubAppInstallationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GitHubAppInstallationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GitHubAppInstallationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GitHubAppInstallationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GitHubAppInstallationValidationError) ErrorName() string {
	return "GitHubAppInstallationValidationError"
}

// Error satisfies the builtin error interface
func (e GitHubAppInstallationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGitHubAppInstallation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GitHubAppInstallationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GitHubAppInstallationValidationError{}
