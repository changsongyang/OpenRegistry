// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/kon/github_actions/v1/build_job.proto

package github_actions_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BulkDeleteBuildJobsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BulkDeleteBuildJobsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BulkDeleteBuildJobsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BulkDeleteBuildJobsRequestMultiError, or nil if none found.
func (m *BulkDeleteBuildJobsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BulkDeleteBuildJobsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OwnerId

	// no validation rules for Repo

	if len(errors) > 0 {
		return BulkDeleteBuildJobsRequestMultiError(errors)
	}

	return nil
}

// BulkDeleteBuildJobsRequestMultiError is an error wrapping multiple
// validation errors returned by BulkDeleteBuildJobsRequest.ValidateAll() if
// the designated constraints aren't met.
type BulkDeleteBuildJobsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BulkDeleteBuildJobsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BulkDeleteBuildJobsRequestMultiError) AllErrors() []error { return m }

// BulkDeleteBuildJobsRequestValidationError is the validation error returned
// by BulkDeleteBuildJobsRequest.Validate if the designated constraints aren't met.
type BulkDeleteBuildJobsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkDeleteBuildJobsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkDeleteBuildJobsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkDeleteBuildJobsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkDeleteBuildJobsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkDeleteBuildJobsRequestValidationError) ErrorName() string {
	return "BulkDeleteBuildJobsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BulkDeleteBuildJobsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkDeleteBuildJobsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkDeleteBuildJobsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkDeleteBuildJobsRequestValidationError{}

// Validate checks the field values on BulkDeleteBuildJobsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BulkDeleteBuildJobsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BulkDeleteBuildJobsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BulkDeleteBuildJobsResponseMultiError, or nil if none found.
func (m *BulkDeleteBuildJobsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BulkDeleteBuildJobsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return BulkDeleteBuildJobsResponseMultiError(errors)
	}

	return nil
}

// BulkDeleteBuildJobsResponseMultiError is an error wrapping multiple
// validation errors returned by BulkDeleteBuildJobsResponse.ValidateAll() if
// the designated constraints aren't met.
type BulkDeleteBuildJobsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BulkDeleteBuildJobsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BulkDeleteBuildJobsResponseMultiError) AllErrors() []error { return m }

// BulkDeleteBuildJobsResponseValidationError is the validation error returned
// by BulkDeleteBuildJobsResponse.Validate if the designated constraints
// aren't met.
type BulkDeleteBuildJobsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkDeleteBuildJobsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkDeleteBuildJobsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkDeleteBuildJobsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkDeleteBuildJobsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkDeleteBuildJobsResponseValidationError) ErrorName() string {
	return "BulkDeleteBuildJobsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BulkDeleteBuildJobsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkDeleteBuildJobsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkDeleteBuildJobsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkDeleteBuildJobsResponseValidationError{}

// Validate checks the field values on TriggerBuildRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerBuildRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerBuildRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerBuildRequestMultiError, or nil if none found.
func (m *TriggerBuildRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerBuildRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RunId

	if all {
		switch v := interface{}(m.GetTriggeredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TriggerBuildRequestValidationError{
					field:  "TriggeredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TriggerBuildRequestValidationError{
					field:  "TriggeredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTriggeredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TriggerBuildRequestValidationError{
				field:  "TriggeredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OwnerId

	// no validation rules for Repo

	if len(errors) > 0 {
		return TriggerBuildRequestMultiError(errors)
	}

	return nil
}

// TriggerBuildRequestMultiError is an error wrapping multiple validation
// errors returned by TriggerBuildRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerBuildRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerBuildRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerBuildRequestMultiError) AllErrors() []error { return m }

// TriggerBuildRequestValidationError is the validation error returned by
// TriggerBuildRequest.Validate if the designated constraints aren't met.
type TriggerBuildRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerBuildRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerBuildRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerBuildRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerBuildRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerBuildRequestValidationError) ErrorName() string {
	return "TriggerBuildRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerBuildRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerBuildRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerBuildRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerBuildRequestValidationError{}

// Validate checks the field values on TriggerBuildResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerBuildResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerBuildResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerBuildResponseMultiError, or nil if none found.
func (m *TriggerBuildResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerBuildResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return TriggerBuildResponseMultiError(errors)
	}

	return nil
}

// TriggerBuildResponseMultiError is an error wrapping multiple validation
// errors returned by TriggerBuildResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerBuildResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerBuildResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerBuildResponseMultiError) AllErrors() []error { return m }

// TriggerBuildResponseValidationError is the validation error returned by
// TriggerBuildResponse.Validate if the designated constraints aren't met.
type TriggerBuildResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerBuildResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerBuildResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerBuildResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerBuildResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerBuildResponseValidationError) ErrorName() string {
	return "TriggerBuildResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerBuildResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerBuildResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerBuildResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerBuildResponseValidationError{}

// Validate checks the field values on CancelBuildRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelBuildRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelBuildRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelBuildRequestMultiError, or nil if none found.
func (m *CancelBuildRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelBuildRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	// no validation rules for RunId

	if all {
		switch v := interface{}(m.GetCancelledAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CancelBuildRequestValidationError{
					field:  "CancelledAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CancelBuildRequestValidationError{
					field:  "CancelledAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCancelledAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CancelBuildRequestValidationError{
				field:  "CancelledAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OwnerId

	// no validation rules for Repo

	if len(errors) > 0 {
		return CancelBuildRequestMultiError(errors)
	}

	return nil
}

// CancelBuildRequestMultiError is an error wrapping multiple validation errors
// returned by CancelBuildRequest.ValidateAll() if the designated constraints
// aren't met.
type CancelBuildRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelBuildRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelBuildRequestMultiError) AllErrors() []error { return m }

// CancelBuildRequestValidationError is the validation error returned by
// CancelBuildRequest.Validate if the designated constraints aren't met.
type CancelBuildRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelBuildRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelBuildRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelBuildRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelBuildRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelBuildRequestValidationError) ErrorName() string {
	return "CancelBuildRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelBuildRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelBuildRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelBuildRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelBuildRequestValidationError{}

// Validate checks the field values on CancelBuildResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelBuildResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelBuildResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelBuildResponseMultiError, or nil if none found.
func (m *CancelBuildResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelBuildResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return CancelBuildResponseMultiError(errors)
	}

	return nil
}

// CancelBuildResponseMultiError is an error wrapping multiple validation
// errors returned by CancelBuildResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelBuildResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelBuildResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelBuildResponseMultiError) AllErrors() []error { return m }

// CancelBuildResponseValidationError is the validation error returned by
// CancelBuildResponse.Validate if the designated constraints aren't met.
type CancelBuildResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelBuildResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelBuildResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelBuildResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelBuildResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelBuildResponseValidationError) ErrorName() string {
	return "CancelBuildResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelBuildResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelBuildResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelBuildResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelBuildResponseValidationError{}

// Validate checks the field values on GetBuildJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBuildJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBuildJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBuildJobRequestMultiError, or nil if none found.
func (m *GetBuildJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBuildJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JobId

	// no validation rules for OwnerId

	// no validation rules for Repo

	if len(errors) > 0 {
		return GetBuildJobRequestMultiError(errors)
	}

	return nil
}

// GetBuildJobRequestMultiError is an error wrapping multiple validation errors
// returned by GetBuildJobRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBuildJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBuildJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBuildJobRequestMultiError) AllErrors() []error { return m }

// GetBuildJobRequestValidationError is the validation error returned by
// GetBuildJobRequest.Validate if the designated constraints aren't met.
type GetBuildJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBuildJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBuildJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBuildJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBuildJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBuildJobRequestValidationError) ErrorName() string {
	return "GetBuildJobRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBuildJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBuildJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBuildJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBuildJobRequestValidationError{}

// Validate checks the field values on GetBuildJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetBuildJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBuildJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBuildJobResponseMultiError, or nil if none found.
func (m *GetBuildJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBuildJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for LogsUrl

	// no validation rules for Status

	// no validation rules for TriggeredBy

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBuildJobResponseValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBuildJobResponseValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBuildJobResponseValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Branch

	// no validation rules for CommitHash

	if all {
		switch v := interface{}(m.GetTriggeredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetBuildJobResponseValidationError{
					field:  "TriggeredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetBuildJobResponseValidationError{
					field:  "TriggeredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTriggeredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetBuildJobResponseValidationError{
				field:  "TriggeredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OwnerId

	if len(errors) > 0 {
		return GetBuildJobResponseMultiError(errors)
	}

	return nil
}

// GetBuildJobResponseMultiError is an error wrapping multiple validation
// errors returned by GetBuildJobResponse.ValidateAll() if the designated
// constraints aren't met.
type GetBuildJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBuildJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBuildJobResponseMultiError) AllErrors() []error { return m }

// GetBuildJobResponseValidationError is the validation error returned by
// GetBuildJobResponse.Validate if the designated constraints aren't met.
type GetBuildJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBuildJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBuildJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBuildJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBuildJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBuildJobResponseValidationError) ErrorName() string {
	return "GetBuildJobResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBuildJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBuildJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBuildJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBuildJobResponseValidationError{}

// Validate checks the field values on DeleteJobRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteJobRequestMultiError, or nil if none found.
func (m *DeleteJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RunId

	// no validation rules for OwnerId

	// no validation rules for Repo

	if len(errors) > 0 {
		return DeleteJobRequestMultiError(errors)
	}

	return nil
}

// DeleteJobRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteJobRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteJobRequestMultiError) AllErrors() []error { return m }

// DeleteJobRequestValidationError is the validation error returned by
// DeleteJobRequest.Validate if the designated constraints aren't met.
type DeleteJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteJobRequestValidationError) ErrorName() string { return "DeleteJobRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteJobRequestValidationError{}

// Validate checks the field values on DeleteJobResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteJobResponseMultiError, or nil if none found.
func (m *DeleteJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteJobResponseMultiError(errors)
	}

	return nil
}

// DeleteJobResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteJobResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteJobResponseMultiError) AllErrors() []error { return m }

// DeleteJobResponseValidationError is the validation error returned by
// DeleteJobResponse.Validate if the designated constraints aren't met.
type DeleteJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteJobResponseValidationError) ErrorName() string {
	return "DeleteJobResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteJobResponseValidationError{}

// Validate checks the field values on StoreJobResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StoreJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoreJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StoreJobResponseMultiError, or nil if none found.
func (m *StoreJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StoreJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return StoreJobResponseMultiError(errors)
	}

	return nil
}

// StoreJobResponseMultiError is an error wrapping multiple validation errors
// returned by StoreJobResponse.ValidateAll() if the designated constraints
// aren't met.
type StoreJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoreJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoreJobResponseMultiError) AllErrors() []error { return m }

// StoreJobResponseValidationError is the validation error returned by
// StoreJobResponse.Validate if the designated constraints aren't met.
type StoreJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreJobResponseValidationError) ErrorName() string { return "StoreJobResponseValidationError" }

// Error satisfies the builtin error interface
func (e StoreJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoreJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreJobResponseValidationError{}

// Validate checks the field values on StoreJobRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StoreJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoreJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StoreJobRequestMultiError, or nil if none found.
func (m *StoreJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StoreJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for LogsUrl

	// no validation rules for Status

	// no validation rules for TriggeredBy

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoreJobRequestValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoreJobRequestValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoreJobRequestValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Branch

	// no validation rules for CommitHash

	if all {
		switch v := interface{}(m.GetTriggeredAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StoreJobRequestValidationError{
					field:  "TriggeredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StoreJobRequestValidationError{
					field:  "TriggeredAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTriggeredAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StoreJobRequestValidationError{
				field:  "TriggeredAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OwnerId

	if len(errors) > 0 {
		return StoreJobRequestMultiError(errors)
	}

	return nil
}

// StoreJobRequestMultiError is an error wrapping multiple validation errors
// returned by StoreJobRequest.ValidateAll() if the designated constraints
// aren't met.
type StoreJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoreJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoreJobRequestMultiError) AllErrors() []error { return m }

// StoreJobRequestValidationError is the validation error returned by
// StoreJobRequest.Validate if the designated constraints aren't met.
type StoreJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreJobRequestValidationError) ErrorName() string { return "StoreJobRequestValidationError" }

// Error satisfies the builtin error interface
func (e StoreJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoreJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreJobRequestValidationError{}

// Validate checks the field values on ListBuildJobsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBuildJobsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBuildJobsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBuildJobsRequestMultiError, or nil if none found.
func (m *ListBuildJobsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBuildJobsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OwnerId

	// no validation rules for Repo

	if len(errors) > 0 {
		return ListBuildJobsRequestMultiError(errors)
	}

	return nil
}

// ListBuildJobsRequestMultiError is an error wrapping multiple validation
// errors returned by ListBuildJobsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListBuildJobsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBuildJobsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBuildJobsRequestMultiError) AllErrors() []error { return m }

// ListBuildJobsRequestValidationError is the validation error returned by
// ListBuildJobsRequest.Validate if the designated constraints aren't met.
type ListBuildJobsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBuildJobsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBuildJobsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBuildJobsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBuildJobsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBuildJobsRequestValidationError) ErrorName() string {
	return "ListBuildJobsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBuildJobsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBuildJobsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBuildJobsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBuildJobsRequestValidationError{}

// Validate checks the field values on ListBuildJobsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBuildJobsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBuildJobsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBuildJobsResponseMultiError, or nil if none found.
func (m *ListBuildJobsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBuildJobsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetJobs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBuildJobsResponseValidationError{
						field:  fmt.Sprintf("Jobs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBuildJobsResponseValidationError{
						field:  fmt.Sprintf("Jobs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBuildJobsResponseValidationError{
					field:  fmt.Sprintf("Jobs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBuildJobsResponseMultiError(errors)
	}

	return nil
}

// ListBuildJobsResponseMultiError is an error wrapping multiple validation
// errors returned by ListBuildJobsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBuildJobsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBuildJobsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBuildJobsResponseMultiError) AllErrors() []error { return m }

// ListBuildJobsResponseValidationError is the validation error returned by
// ListBuildJobsResponse.Validate if the designated constraints aren't met.
type ListBuildJobsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBuildJobsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBuildJobsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBuildJobsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBuildJobsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBuildJobsResponseValidationError) ErrorName() string {
	return "ListBuildJobsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBuildJobsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBuildJobsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBuildJobsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBuildJobsResponseValidationError{}
